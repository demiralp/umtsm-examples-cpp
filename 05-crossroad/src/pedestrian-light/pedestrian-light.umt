/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-29 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

type sm Crossroad;
type sm Monitor;
type sm ExecutionDirector;

//*********************************************************
// PedestrianLights
//*********************************************************

sm PedestrianLights
{
    properties
    {
      optional ExecutionDirector pExecutionDirector;
      optional Monitor pMonitor;
      optional Crossroad pCrossroad;
    }

    init -> Start;

    fork Start
    {
        -> Top:Black;
        -> Bottom:Black;
    }

    region Top
    {
        state Red
        {
            SystemDisabled -> Black;

            Check [IsStopCheckAndGo || IsCheckAndGo] -> Off;

            state Off
            {
                entry / SwitchRedLightOff;

                Check [IsSystemSwitching] -> On:Flashing;
                Check [IsSystemOperational && IsLaneClose] -> On;

                state Flashing
                {
                    do / CountForFlashing;

                    Check [IsSystemOperational && IsLaneOpen] -> Off;

                    -> On:Flashing;
                }
            }

            state On
            {
                entry / SwitchRedLightOn;

                Check [IsSystemSwitching] -> On:Flashing;
                Check [IsSystemOperational && IsLaneOpen] -> Off;

                state Flashing
                {
                    do / CountForFlashing;

                    Check [IsSystemOperational && IsLaneClose] -> On;

                    -> Off:Flashing;
                }
            }
        }

        state Black
        {
            entry / SwitchRedLightOff;

            SystemEnabled -> On:Flashing;
        }
    }

    region Bottom
    {
        state Green
        {
            SystemDisabled -> Black;

            Check [IsStopCheckAndGo || IsCheckAndGo] -> On:Flashing;

            state Off
            {
                entry / SwitchGreenLightOff;

                Check [IsSystemSwitching] -> On:Flashing;
                Check [IsSystemOperational && IsLaneOpen] -> On;

                state Flashing
                {
                    do / CountForFlashing;

                    Check [IsSystemOperational && IsLaneClose] -> Off;

                    -> On:Flashing;
                }
            }

            state On
            {
                entry / SwitchGreenLightOn;

                Check [IsSystemSwitching] -> On:Flashing;
                Check [IsSystemOperational && IsLaneClose] -> Off;

                state Flashing
                {
                    do / CountForFlashing;

                    Check [IsSystemOperational && IsLaneOpen] -> On;

                    -> Off:Flashing;
                }
            }
        }


        state Black
        {
            entry / SwitchRedLightOff;

            SystemEnabled -> On:Flashing;
        }
    }
}
