#  ==============================================================================
#  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
#  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
#
#  This file is generated by UMTSM using the code generator `CppGen`
#
#  Released under the MIT License
#  ==============================================================================
#

#  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#

#
# Build the module
#

cmake_minimum_required( VERSION 3.20 )

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif()

set(VERSION 1.0)
project( UMTSM-Crossroad VERSION ${VERSION} LANGUAGES CXX)

include(GNUInstallDirs)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_BUILD_TYPE Debug)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# add_compile_options(-Wall -Wextra -Wpedantic)

# includes extra rules if any
if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/CMakeExtras.cmake)
  include(${CMAKE_CURRENT_SOURCE_DIR}/CMakeExtras.cmake)
endif()

#
# Build State Machine `Crossroad`
#
if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_Auxilary.cpp")
    file(COPY_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_Auxilary.cpp.template" "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_Auxilary.cpp")
endif()

if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.hh")
    file(COPY_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.hh.template" "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.hh")
endif()

if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.cpp")
    file(COPY_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.cpp.template" "${CMAKE_CURRENT_SOURCE_DIR}/Crossroad_DataType.cpp")
endif()

set(LIBRCrossroad_SOURCE Crossroad_DataType.cpp Crossroad.cpp Crossroad_Auxilary.cpp)
set(LIBRCrossroad_HEADER Crossroad_DataType.hh Crossroad.hh)

add_library(LIBRCrossroad_Shared SHARED
  ${LIBRCrossroad_SOURCE}
  ${LIBRCrossroad_HEADER}
  ${LIBCrossroad_SOURCE_EXTRA}
  ${LIBCrossroad_HEADER_EXTRA})
set_target_properties(LIBRCrossroad_Shared PROPERTIES VERSION 1.0.0)
set_target_properties(LIBRCrossroad_Shared PROPERTIES SOVERSION 1)
set_target_properties(LIBRCrossroad_Shared PROPERTIES POSITION_INDEPENDENT_CODE ON)
set_target_properties(LIBRCrossroad_Shared PROPERTIES OUTPUT_NAME "Crossroad")
target_include_directories(LIBRCrossroad_Shared PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
if(DEFINED LIBCrossroad_INCLUDES_EXTRA)
  target_include_directories(LIBRCrossroad_Shared PRIVATE "${LIBCrossroad_INCLUDES_EXTRA}")
endif()
if(DEFINED LIBCrossroad_LIB_EXTRA)
  target_link_libraries(LIBRCrossroad_Shared ${LIBCrossroad_LIB_EXTRA})
endif()
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  target_compile_options(LIBRCrossroad_Shared PRIVATE "-O4")
  target_compile_options(LIBRCrossroad_Shared PRIVATE "-fdata-sections" "-ffunction-sections")
endif()

add_library(LIBRCrossroad_Static STATIC
  ${LIBRCrossroad_SOURCE}
  ${LIBRCrossroad_HEADER}
  ${LIBCrossroad_SOURCE_EXTRA}
  ${LIBCrossroad_HEADER_EXTRA})
set_target_properties(LIBRCrossroad_Static PROPERTIES OUTPUT_NAME "Crossroad")
target_include_directories(LIBRCrossroad_Static PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
if(DEFINED LIBCrossroad_INCLUDES_EXTRA)
  target_include_directories(LIBRCrossroad_Static PRIVATE "${LIBCrossroad_INCLUDES_EXTRA}")
endif()
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  target_compile_options(LIBRCrossroad_Static PRIVATE "-O4")
  target_compile_options(LIBRCrossroad_Static PRIVATE "-fdata-sections" "-ffunction-sections")
endif()

# End CMakeList.txt
