/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-12 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <Crossroad_DataType.hh>

#include <Lane.hh>
#include <PedestrianLights.hh>
#include <TrafficLight.hh>

class Crossroad
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_final
    };

  private:
    enum class RgLane1_States
    {
      E_init,
      E_Lane1,
      E_final
    };

  private:
    enum class RgLane2_States
    {
      E_init,
      E_Lane2,
      E_final
    };

  private:
    enum class RgLane3_States
    {
      E_init,
      E_Lane3,
      E_final
    };

  private:
    enum class RgLane4_States
    {
      E_init,
      E_Lane4,
      E_final
    };

  private:
    enum class RgPedestrianLanes_States
    {
      E_init,
      E_PedestrianLanes,
      E_final
    };

  private:
    enum class RgTrafficLight1_States
    {
      E_init,
      E_TrafficLight1,
      E_final
    };

  private:
    enum class RgTrafficLight2_States
    {
      E_init,
      E_TrafficLight2,
      E_final
    };

  private:
    enum class RgTrafficLight3_States
    {
      E_init,
      E_TrafficLight3,
      E_final
    };

  private:
    enum class RgTrafficLight4_States
    {
      E_init,
      E_TrafficLight4,
      E_final
    };

  private:
    enum class RgPedestrianLight_States
    {
      E_init,
      E_PedestrianLight,
      E_final
    };

  public:
    enum class SubstateMachines
    {
      E_Self,
      E_SubSM_Lane1,
      E_SubSM_Lane2,
      E_SubSM_Lane3,
      E_SubSM_Lane4,
      E_SubSM_PedestrianLanes,
      E_SubSM_TrafficLight1,
      E_SubSM_TrafficLight2,
      E_SubSM_TrafficLight3,
      E_SubSM_TrafficLight4,
      E_SubSM_PedestrianLight
    };

  private:
    struct
    {
      Main_States Main;
      RgLane1_States RgLane1;
      RgLane2_States RgLane2;
      RgLane3_States RgLane3;
      RgLane4_States RgLane4;
      RgPedestrianLanes_States RgPedestrianLanes;
      RgTrafficLight1_States RgTrafficLight1;
      RgTrafficLight2_States RgTrafficLight2;
      RgTrafficLight3_States RgTrafficLight3;
      RgTrafficLight4_States RgTrafficLight4;
      RgPedestrianLight_States RgPedestrianLight;
    } runningState;

  private:
    struct
    {
      Lane Lane1;
      Lane Lane2;
      Lane Lane3;
      Lane Lane4;
      Lane PedestrianLanes;
      TrafficLight TrafficLight1;
      TrafficLight TrafficLight2;
      TrafficLight TrafficLight3;
      TrafficLight TrafficLight4;
      PedestrianLights PedestrianLight;
    } subSM;

  public:
    Crossroad_DataType instanceData;

  public:
    Crossroad( );
    virtual ~Crossroad( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;
    bool is_RgLane1_Region_Ready( ) const noexcept;
    bool is_RgLane2_Region_Ready( ) const noexcept;
    bool is_RgLane3_Region_Ready( ) const noexcept;
    bool is_RgLane4_Region_Ready( ) const noexcept;
    bool is_RgPedestrianLanes_Region_Ready( ) const noexcept;
    bool is_RgTrafficLight1_Region_Ready( ) const noexcept;
    bool is_RgTrafficLight2_Region_Ready( ) const noexcept;
    bool is_RgTrafficLight3_Region_Ready( ) const noexcept;
    bool is_RgTrafficLight4_Region_Ready( ) const noexcept;
    bool is_RgPedestrianLight_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;
    bool is_RgLane1_Region_Terminated( ) const noexcept;
    bool is_RgLane2_Region_Terminated( ) const noexcept;
    bool is_RgLane3_Region_Terminated( ) const noexcept;
    bool is_RgLane4_Region_Terminated( ) const noexcept;
    bool is_RgPedestrianLanes_Region_Terminated( ) const noexcept;
    bool is_RgTrafficLight1_Region_Terminated( ) const noexcept;
    bool is_RgTrafficLight2_Region_Terminated( ) const noexcept;
    bool is_RgTrafficLight3_Region_Terminated( ) const noexcept;
    bool is_RgTrafficLight4_Region_Terminated( ) const noexcept;
    bool is_RgPedestrianLight_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;
    bool isIn_RgLane1_Region( ) const noexcept;
    bool isIn_RgLane2_Region( ) const noexcept;
    bool isIn_RgLane3_Region( ) const noexcept;
    bool isIn_RgLane4_Region( ) const noexcept;
    bool isIn_RgPedestrianLanes_Region( ) const noexcept;
    bool isIn_RgTrafficLight1_Region( ) const noexcept;
    bool isIn_RgTrafficLight2_Region( ) const noexcept;
    bool isIn_RgTrafficLight3_Region( ) const noexcept;
    bool isIn_RgTrafficLight4_Region( ) const noexcept;
    bool isIn_RgPedestrianLight_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_Lane1_State( ) const noexcept;
    bool isIn_Lane2_State( ) const noexcept;
    bool isIn_Lane3_State( ) const noexcept;
    bool isIn_Lane4_State( ) const noexcept;
    bool isIn_PedestrianLanes_State( ) const noexcept;
    bool isIn_TrafficLight1_State( ) const noexcept;
    bool isIn_TrafficLight2_State( ) const noexcept;
    bool isIn_TrafficLight3_State( ) const noexcept;
    bool isIn_TrafficLight4_State( ) const noexcept;
    bool isIn_PedestrianLight_State( ) const noexcept;

    void trigger_Allowed( );
    void trigger_Check( );
    void trigger_Close( );
    void trigger_Disallowed( );
    void trigger_Open( );
    void trigger_Prepare( );
    void trigger_StartControlling( );
    void trigger_StopControlling( );
    void trigger_SystemDisabled( );
    void trigger_SystemEnabled( );

    Crossroad_DataType* getData( ) noexcept;

    Lane_DataType* getSMData_Lane1( ) noexcept;
    Lane_DataType* getSMData_Lane2( ) noexcept;
    Lane_DataType* getSMData_Lane3( ) noexcept;
    Lane_DataType* getSMData_Lane4( ) noexcept;
    Lane_DataType* getSMData_PedestrianLanes( ) noexcept;
    TrafficLight_DataType* getSMData_TrafficLight1( ) noexcept;
    TrafficLight_DataType* getSMData_TrafficLight2( ) noexcept;
    TrafficLight_DataType* getSMData_TrafficLight3( ) noexcept;
    TrafficLight_DataType* getSMData_TrafficLight4( ) noexcept;
    PedestrianLights_DataType* getSMData_PedestrianLight( ) noexcept;

    Lane* getSubSM_Lane1( ) noexcept;
    Lane* getSubSM_Lane2( ) noexcept;
    Lane* getSubSM_Lane3( ) noexcept;
    Lane* getSubSM_Lane4( ) noexcept;
    Lane* getSubSM_PedestrianLanes( ) noexcept;
    TrafficLight* getSubSM_TrafficLight1( ) noexcept;
    TrafficLight* getSubSM_TrafficLight2( ) noexcept;
    TrafficLight* getSubSM_TrafficLight3( ) noexcept;
    TrafficLight* getSubSM_TrafficLight4( ) noexcept;
    PedestrianLights* getSubSM_PedestrianLight( ) noexcept;

    void subSMTrigger_Allowed( SubstateMachines subsm );
    void subSMTrigger_Check( SubstateMachines subsm );
    void subSMTrigger_Close( SubstateMachines subsm );
    void subSMTrigger_Disallowed( SubstateMachines subsm );
    void subSMTrigger_Open( SubstateMachines subsm );
    void subSMTrigger_Prepare( SubstateMachines subsm );
    void subSMTrigger_StartControlling( SubstateMachines subsm );
    void subSMTrigger_StopControlling( SubstateMachines subsm );
    void subSMTrigger_SystemEnabled( SubstateMachines subsm );

  private:
    void finalize_Main( );
    void finalize_RgLane1( );
    void finalize_RgLane2( );
    void finalize_RgLane3( );
    void finalize_RgLane4( );
    void finalize_RgPedestrianLanes( );
    void finalize_RgTrafficLight1( );
    void finalize_RgTrafficLight2( );
    void finalize_RgTrafficLight3( );
    void finalize_RgTrafficLight4( );
    void finalize_RgPedestrianLight( );

    void terminate( );

    void exit_Lane1( );
    void exit_Lane2( );
    void exit_Lane3( );
    void exit_Lane4( );
    void exit_PedestrianLanes( );
    void exit_TrafficLight1( );
    void exit_TrafficLight2( );
    void exit_TrafficLight3( );
    void exit_TrafficLight4( );
    void exit_PedestrianLight( );

    void init_Main( );
    void init_Lane1( );
    void init_Lane2( );
    void init_Lane3( );
    void init_Lane4( );
    void init_PedestrianLanes( );
    void init_TrafficLight1( );
    void init_TrafficLight2( );
    void init_TrafficLight3( );
    void init_TrafficLight4( );
    void init_PedestrianLight( );

  // The interface of the thread support functions
  private:
  };

  // End of Crossroad.hh
