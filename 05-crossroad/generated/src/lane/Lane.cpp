/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Lane.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>

Lane::Lane( )
{
  initialize( );
}

Lane::~Lane( )
{
  deinitialize( );
}

void Lane::initialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void Lane::deinitialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void Lane::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    std::lock_guard<std::mutex> lockGuard( guard );

    storedState.shallow_Availability = load_Shallow_Availability( instanceData );

    init_Main( );
  }
}

void Lane::halt( )
{
  finalize_Main( );
}

bool Lane::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Lane::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool Lane::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Lane::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Lane::is_Availability_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Availability == Availability_States::E_init );
  return ready;
}

bool Lane::is_Controlling_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Controlling == Controlling_States::E_init );
  return ready;
}

bool Lane::is_Status_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Status == Status_States::E_init );
  return ready;
}

bool Lane::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Lane::is_Availability_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Availability == Availability_States::E_final );
  return terminated;
}

bool Lane::is_Controlling_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Controlling == Controlling_States::E_final );
  return terminated;
}

bool Lane::is_Status_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Status == Status_States::E_final );
  return terminated;
}

bool Lane::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool Lane::isIn_Availability_Region( ) const noexcept
{
  bool const result = ( runningState.Availability != Availability_States::E_init ) &&
                      ( runningState.Availability != Availability_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool Lane::isIn_Controlling_Region( ) const noexcept
{
  bool const result = ( runningState.Controlling != Controlling_States::E_init ) &&
                      ( runningState.Controlling != Controlling_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool Lane::isIn_Status_Region( ) const noexcept
{
  bool const result = ( runningState.Status != Status_States::E_init ) &&
                      ( runningState.Status != Status_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool Lane::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_Main );

  return result;
}

bool Lane::isIn_Available_State( ) const noexcept
{
  bool const result = isIn_Availability_Region( ) &&
    ( runningState.Availability == Availability_States::E_Available );

  return result;
}

bool Lane::isIn_Unavailable_State( ) const noexcept
{
  bool const result = isIn_Availability_Region( ) &&
    ( runningState.Availability == Availability_States::E_Unavailable );

  return result;
}

bool Lane::isIn_Unmanaged_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( runningState.Controlling == Controlling_States::E_Unmanaged );

  return result;
}

bool Lane::isIn_Managed_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( ( runningState.Controlling == Controlling_States::E_Managed ) || 
      ( runningState.Controlling == Controlling_States::E_Uncontrolled ) || 
      ( runningState.Controlling == Controlling_States::E_Controlled ) || 
      ( runningState.Controlling == Controlling_States::E_CheckAndGo ) || 
      ( runningState.Controlling == Controlling_States::E_StopAndCheck ) );

  return result;
}

bool Lane::isIn_Uncontrolled_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( ( runningState.Controlling == Controlling_States::E_Uncontrolled ) || 
      ( runningState.Controlling == Controlling_States::E_CheckAndGo ) || 
      ( runningState.Controlling == Controlling_States::E_StopAndCheck ) );

  return result;
}

bool Lane::isIn_CheckAndGo_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( runningState.Controlling == Controlling_States::E_CheckAndGo );

  return result;
}

bool Lane::isIn_StopAndCheck_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( runningState.Controlling == Controlling_States::E_StopAndCheck );

  return result;
}

bool Lane::isIn_Controlled_State( ) const noexcept
{
  bool const result = isIn_Controlling_Region( ) &&
    ( runningState.Controlling == Controlling_States::E_Controlled );

  return result;
}

bool Lane::isIn_Close_State( ) const noexcept
{
  bool const result = isIn_Status_Region( ) &&
    ( ( runningState.Status == Status_States::E_Close ) || 
      ( runningState.Status == Status_States::E_Ready ) );

  return result;
}

bool Lane::isIn_Ready_State( ) const noexcept
{
  bool const result = isIn_Status_Region( ) &&
    ( runningState.Status == Status_States::E_Ready );

  return result;
}

bool Lane::isIn_Open_State( ) const noexcept
{
  bool const result = isIn_Status_Region( ) &&
    ( ( runningState.Status == Status_States::E_Open ) || 
      ( runningState.Status == Status_States::E_PrepareToStop ) );

  return result;
}

bool Lane::isIn_PrepareToStop_State( ) const noexcept
{
  bool const result = isIn_Status_Region( ) &&
    ( runningState.Status == Status_States::E_PrepareToStop );

  return result;
}

Lane_DataType* Lane::getData( ) noexcept
{
  Lane_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void Lane::trigger_Allowed( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneAvailability = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Availability_Region( ) )
  {
    doneAvailability = true;

    if ( isIn_Unavailable_State( ) )
    {
      runningState.Availability = Availability_States::E_Available;
      storedState.shallow_Availability = Availability_States::E_Available;
      store_Shallow_Availability( storedState.shallow_Availability, instanceData );
    }
    else
    {
      doneAvailability = false;
    }
  }
}

void Lane::trigger_Close( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneStatus = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Status_Region( ) )
  {
    doneStatus = true;

    if ( isIn_Open_State( ) )
    {
      if ( isIn_PrepareToStop_State( ) )
      {
        runningState.Status = Status_States::E_Close;
      }
      else
      {
        runningState.Status = Status_States::E_Close;
      }
    }
    else
    {
      doneStatus = false;
    }
  }
}

void Lane::trigger_Disallowed( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneAvailability = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Availability_Region( ) )
  {
    doneAvailability = true;

    if ( isIn_Available_State( ) )
    {
      runningState.Availability = Availability_States::E_Unavailable;
      storedState.shallow_Availability = Availability_States::E_Unavailable;
      store_Shallow_Availability( storedState.shallow_Availability, instanceData );
    }
    else
    {
      doneAvailability = false;
    }
  }
}

void Lane::trigger_Open( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneStatus = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Status_Region( ) )
  {
    doneStatus = true;

    if ( isIn_Close_State( ) )
    {
      if ( isIn_Ready_State( ) )
      {
        runningState.Status = Status_States::E_Open;
      }
      else
      {
        runningState.Status = Status_States::E_Open;
      }
    }
    else
    {
      doneStatus = false;
    }
  }
}

void Lane::trigger_Prepare( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneStatus = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Status_Region( ) )
  {
    doneStatus = true;

    if ( isIn_Close_State( ) )
    {
      if ( isIn_Ready_State( ) )
      {
      }
      else
      {
        runningState.Status = Status_States::E_Ready;
      }
    }
    else if ( isIn_Open_State( ) )
    {
      if ( isIn_PrepareToStop_State( ) )
      {
      }
      else
      {
        runningState.Status = Status_States::E_PrepareToStop;
      }
    }
    else
    {
      doneStatus = false;
    }
  }
}

void Lane::trigger_StartControlling( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneControlling = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlling_Region( ) )
  {
    doneControlling = true;

    if ( isIn_Unmanaged_State( ) )
    {
      runningState.Controlling = Controlling_States::E_Controlled;
    }

    if ( isIn_Uncontrolled_State( ) )
    {
      if ( isIn_CheckAndGo_State( ) )
      {
        runningState.Controlling = Controlling_States::E_Controlled;
      }
      else if ( isIn_StopAndCheck_State( ) )
      {
        runningState.Controlling = Controlling_States::E_Controlled;
      }
      else
      {
        runningState.Controlling = Controlling_States::E_Controlled;
      }
    }
    else
    {
      doneControlling = false;
    }
  }
}

void Lane::trigger_StopControlling( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneControlling = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlling_Region( ) )
  {
    doneControlling = true;

    if ( isIn_Unmanaged_State( ) )
    {
      init_Uncontrolled( );
    }

    if ( isIn_Controlled_State( ) )
    {
      init_Uncontrolled( );
    }
    else
    {
      doneControlling = false;
    }
  }
}

void Lane::trigger_SystemDisabled( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneControlling = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlling_Region( ) )
  {
    doneControlling = true;

    if ( isIn_Managed_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckAndGo_State( ) )
        {
          runningState.Controlling = Controlling_States::E_Unmanaged;
        }
        else if ( isIn_StopAndCheck_State( ) )
        {
          runningState.Controlling = Controlling_States::E_Unmanaged;
        }
        else
        {
          runningState.Controlling = Controlling_States::E_Unmanaged;
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        runningState.Controlling = Controlling_States::E_Unmanaged;
      }
      else
      {
        runningState.Controlling = Controlling_States::E_Unmanaged;
      }
    }
    else
    {
      doneControlling = false;
    }
  }
}

void Lane::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    runningState.Main = Main_States::E_final;
  }
}

void Lane::finalize_Availability( )
{
  if ( isIn_Availability_Region( ) )
  {
    runningState.Availability = Availability_States::E_final;
  }
}

void Lane::finalize_Controlling( )
{
  if ( isIn_Controlling_Region( ) )
  {
    runningState.Controlling = Controlling_States::E_final;
  }
}

void Lane::finalize_Status( )
{
  if ( isIn_Status_Region( ) )
  {
    runningState.Status = Status_States::E_final;
  }
}

void Lane::terminate( )
{
  storeEntireStates( );
  finalize_Main( );
}

void Lane::storeEntireStates( )
{
  store_Shallow_Availability( storedState.shallow_Availability, instanceData );
}

void Lane::init_Main( )
{
  runningState.Main = Main_States::E_Main;
  init_Availability( );
  init_Status( );
  runningState.Controlling = Controlling_States::E_Unmanaged;
}

void Lane::init_Availability( )
{
  // started by history stored
  switch ( storedState.shallow_Availability )
  {
    case Availability_States::E_Available:
    {
      runningState.Availability = Availability_States::E_Available;
      break;
    }
    case Availability_States::E_Unavailable:
    {
      runningState.Availability = Availability_States::E_Unavailable;
      break;
    }
    default:
    {
      runningState.Availability = Availability_States::E_Available;
      storedState.shallow_Availability = Availability_States::E_Available;
      store_Shallow_Availability( storedState.shallow_Availability, instanceData );
      break;
    }
  }
}

void Lane::init_Uncontrolled( )
{
  if ( IsCheckAndGo( ) )
  {
    runningState.Controlling = Controlling_States::E_CheckAndGo;
  }
  else
  {
    runningState.Controlling = Controlling_States::E_StopAndCheck;
  }
}

void Lane::init_Status( )
{
  runningState.Status = Status_States::E_Close;
}

// End of Lane.cpp
