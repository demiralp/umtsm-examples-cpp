/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "TrafficLight.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>
#include <unistd.h>

namespace
{
  constexpr std::size_t doActionIndex_Red_Off_Flashing = 0U;
  constexpr std::size_t doActionIndex_Red_On_Flashing = 0U;
  constexpr std::size_t doActionIndex_Amber_Off_Flashing = 1U;
  constexpr std::size_t doActionIndex_Amber_On_Flashing = 1U;
  constexpr std::size_t doActionIndex_Green_Off_Flashing = 2U;
  constexpr std::size_t doActionIndex_Green_On_Flashing = 2U;
}

TrafficLight::TrafficLight( )
{
  initialize( );
}

TrafficLight::~TrafficLight( )
{
  deinitialize( );
}

void TrafficLight::initialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void TrafficLight::deinitialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void TrafficLight::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    std::lock_guard<std::mutex> lockGuard( guard );

    init_Main( );
  }
}

void TrafficLight::halt( )
{
  finalize_Main( );
}

bool TrafficLight::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool TrafficLight::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool TrafficLight::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool TrafficLight::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool TrafficLight::is_Top_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Top == Top_States::E_init );
  return ready;
}

bool TrafficLight::is_Middle_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Middle == Middle_States::E_init );
  return ready;
}

bool TrafficLight::is_Bottom_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Bottom == Bottom_States::E_init );
  return ready;
}

bool TrafficLight::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool TrafficLight::is_Top_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Top == Top_States::E_final );
  return terminated;
}

bool TrafficLight::is_Middle_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Middle == Middle_States::E_final );
  return terminated;
}

bool TrafficLight::is_Bottom_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Bottom == Bottom_States::E_final );
  return terminated;
}

bool TrafficLight::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool TrafficLight::isIn_Top_Region( ) const noexcept
{
  bool const result = ( runningState.Top != Top_States::E_init ) &&
                      ( runningState.Top != Top_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool TrafficLight::isIn_Middle_Region( ) const noexcept
{
  bool const result = ( runningState.Middle != Middle_States::E_init ) &&
                      ( runningState.Middle != Middle_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool TrafficLight::isIn_Bottom_Region( ) const noexcept
{
  bool const result = ( runningState.Bottom != Bottom_States::E_init ) &&
                      ( runningState.Bottom != Bottom_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool TrafficLight::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_Main );

  return result;
}

bool TrafficLight::isIn_Red_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( ( runningState.Top == Top_States::E_Red ) || 
      ( runningState.Top == Top_States::E_Red_Off ) || 
      ( runningState.Top == Top_States::E_Red_On ) || 
      ( runningState.Top == Top_States::E_Red_Off_Flashing ) || 
      ( runningState.Top == Top_States::E_Red_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Red_Off_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( ( runningState.Top == Top_States::E_Red_Off ) || 
      ( runningState.Top == Top_States::E_Red_Off_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Red_Off_Flashing_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( runningState.Top == Top_States::E_Red_Off_Flashing );

  return result;
}

bool TrafficLight::isIn_Red_On_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( ( runningState.Top == Top_States::E_Red_On ) || 
      ( runningState.Top == Top_States::E_Red_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Red_On_Flashing_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( runningState.Top == Top_States::E_Red_On_Flashing );

  return result;
}

bool TrafficLight::isIn_Top_Black_State( ) const noexcept
{
  bool const result = isIn_Top_Region( ) &&
    ( runningState.Top == Top_States::E_Top_Black );

  return result;
}

bool TrafficLight::isIn_Amber_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( ( runningState.Middle == Middle_States::E_Amber ) || 
      ( runningState.Middle == Middle_States::E_Amber_Off ) || 
      ( runningState.Middle == Middle_States::E_Amber_On ) || 
      ( runningState.Middle == Middle_States::E_Amber_Off_Flashing ) || 
      ( runningState.Middle == Middle_States::E_Amber_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Amber_Off_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( ( runningState.Middle == Middle_States::E_Amber_Off ) || 
      ( runningState.Middle == Middle_States::E_Amber_Off_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Amber_Off_Flashing_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( runningState.Middle == Middle_States::E_Amber_Off_Flashing );

  return result;
}

bool TrafficLight::isIn_Amber_On_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( ( runningState.Middle == Middle_States::E_Amber_On ) || 
      ( runningState.Middle == Middle_States::E_Amber_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Amber_On_Flashing_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( runningState.Middle == Middle_States::E_Amber_On_Flashing );

  return result;
}

bool TrafficLight::isIn_Middle_Black_State( ) const noexcept
{
  bool const result = isIn_Middle_Region( ) &&
    ( runningState.Middle == Middle_States::E_Middle_Black );

  return result;
}

bool TrafficLight::isIn_Green_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( ( runningState.Bottom == Bottom_States::E_Green ) || 
      ( runningState.Bottom == Bottom_States::E_Green_Off ) || 
      ( runningState.Bottom == Bottom_States::E_Green_On ) || 
      ( runningState.Bottom == Bottom_States::E_Green_Off_Flashing ) || 
      ( runningState.Bottom == Bottom_States::E_Green_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Green_Off_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( ( runningState.Bottom == Bottom_States::E_Green_Off ) || 
      ( runningState.Bottom == Bottom_States::E_Green_Off_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Green_Off_Flashing_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( runningState.Bottom == Bottom_States::E_Green_Off_Flashing );

  return result;
}

bool TrafficLight::isIn_Green_On_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( ( runningState.Bottom == Bottom_States::E_Green_On ) || 
      ( runningState.Bottom == Bottom_States::E_Green_On_Flashing ) );

  return result;
}

bool TrafficLight::isIn_Green_On_Flashing_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( runningState.Bottom == Bottom_States::E_Green_On_Flashing );

  return result;
}

bool TrafficLight::isIn_Bottom_Black_State( ) const noexcept
{
  bool const result = isIn_Bottom_Region( ) &&
    ( runningState.Bottom == Bottom_States::E_Bottom_Black );

  return result;
}

TrafficLight_DataType* TrafficLight::getData( ) noexcept
{
  TrafficLight_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void TrafficLight::trigger_Check( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneTop = false;
  __attribute__( ( unused ) ) bool doneMiddle = false;
  __attribute__( ( unused ) ) bool doneBottom = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Top_Region( ) )
  {
    doneTop = true;

    if ( isIn_Red_State( ) )
    {
      if ( isIn_Red_Off_State( ) )
      {
        if ( isIn_Red_Off_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            exit_Red_Off_Flashing( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else if ( IsSystemOperational( ) && IsLaneClose( ) )
          {
            exit_Red_Off_Flashing( );
            enter_Red_On( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Red_Off_Flashing( );
            enter_Red_On( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            exit_Red_Off_Flashing( );
            enter_Red_On( );
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            exit_Red_Off_Flashing( );
            enter_Red_On( );
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else if ( IsCheckAndGo( ) )
          {
            exit_Red_Off_Flashing( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && IsLaneClose( ) )
          {
            enter_Red_On( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            enter_Red_On( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Red_On( );
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            enter_Red_On( );
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else if ( isIn_Red_On_State( ) )
      {
        if ( isIn_Red_On_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && IsLaneClose( ) )
          {
            exit_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On;
          }
          else if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            exit_Red_On_Flashing( );
            enter_Red_Off( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else if ( IsCheckAndGo( ) )
          {
            exit_Red_On_Flashing( );
            enter_Red_Off( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            enter_Red_Off( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            enter_Red_On_Flashing( );
            runningState.Top = Top_States::E_Red_On_Flashing;
          }
          else if ( IsCheckAndGo( ) )
          {
            enter_Red_Off( );
            runningState.Top = Top_States::E_Red_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else
      {
        if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
        {
          enter_Red_On( );
          enter_Red_On_Flashing( );
          runningState.Top = Top_States::E_Red_On_Flashing;
        }
        else if ( IsStopCheckAndGo( ) )
        {
          enter_Red_On( );
          enter_Red_On_Flashing( );
          runningState.Top = Top_States::E_Red_On_Flashing;
        }
        else if ( IsCheckAndGo( ) )
        {
          enter_Red_Off( );
          runningState.Top = Top_States::E_Red_Off;
        }
        else
        {
          // left blank. the else block at the end is required by MISRA
        }
      }
    }
    else
    {
      doneTop = false;
    }
  }

  if ( isIn_Middle_Region( ) )
  {
    doneMiddle = true;

    if ( isIn_Amber_State( ) )
    {
      if ( isIn_Amber_Off_State( ) )
      {
        if ( isIn_Amber_Off_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            exit_Amber_Off_Flashing( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsLaneClose( ) )
          {
            exit_Amber_Off_Flashing( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Amber_Off_Flashing( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsSystemOperational( ) && IsLaneOnClosing( ) )
          {
            exit_Amber_Off_Flashing( );
            enter_Amber_On( );
            runningState.Middle = Middle_States::E_Amber_On;
          }
          else if ( IsSystemOperational( ) && IsLaneOnOpening( ) )
          {
            exit_Amber_Off_Flashing( );
            enter_Amber_On( );
            runningState.Middle = Middle_States::E_Amber_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            exit_Amber_Off_Flashing( );
            enter_Amber_On( );
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            exit_Amber_Off_Flashing( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsCheckAndGo( ) )
          {
            exit_Amber_Off_Flashing( );
            enter_Amber_On( );
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && IsLaneOnClosing( ) )
          {
            enter_Amber_On( );
            runningState.Middle = Middle_States::E_Amber_On;
          }
          else if ( IsSystemOperational( ) && IsLaneOnOpening( ) )
          {
            enter_Amber_On( );
            runningState.Middle = Middle_States::E_Amber_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Amber_On( );
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else if ( IsCheckAndGo( ) )
          {
            enter_Amber_On( );
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else if ( isIn_Amber_On_State( ) )
      {
        if ( isIn_Amber_On_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && ( ( IsLaneOpen( ) && ! IsLaneOnClosing( ) ) || ! IsLaneOnOpening( ) ) )
          {
            exit_Amber_On_Flashing( );
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsLaneClose( ) )
          {
            exit_Amber_On_Flashing( );
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Amber_On_Flashing( );
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            exit_Amber_On_Flashing( );
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && ( ( IsLaneOpen( ) && ! IsLaneOnClosing( ) ) || ! IsLaneOnOpening( ) ) )
          {
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsLaneClose( ) )
          {
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) )
          {
            enter_Amber_Off( );
            runningState.Middle = Middle_States::E_Amber_Off;
          }
          else if ( IsCheckAndGo( ) )
          {
            enter_Amber_On_Flashing( );
            runningState.Middle = Middle_States::E_Amber_On_Flashing;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else
      {
        if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
        {
          enter_Amber_On( );
          enter_Amber_On_Flashing( );
          runningState.Middle = Middle_States::E_Amber_On_Flashing;
        }
        else if ( IsStopCheckAndGo( ) )
        {
          enter_Amber_Off( );
          runningState.Middle = Middle_States::E_Amber_Off;
        }
        else if ( IsCheckAndGo( ) )
        {
          enter_Amber_On( );
          enter_Amber_On_Flashing( );
          runningState.Middle = Middle_States::E_Amber_On_Flashing;
        }
        else
        {
          // left blank. the else block at the end is required by MISRA
        }
      }
    }
    else
    {
      doneMiddle = false;
    }
  }

  if ( isIn_Bottom_Region( ) )
  {
    doneBottom = true;

    if ( isIn_Green_State( ) )
    {
      if ( isIn_Green_Off_State( ) )
      {
        if ( isIn_Green_Off_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && IsLaneOnClosing( ) )
          {
            exit_Green_Off_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsLaneClose( ) )
          {
            exit_Green_Off_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Green_Off_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            exit_Green_Off_Flashing( );
            enter_Green_On( );
            runningState.Bottom = Bottom_States::E_Green_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            exit_Green_Off_Flashing( );
            enter_Green_On( );
            enter_Green_On_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) || IsCheckAndGo( ) )
          {
            exit_Green_Off_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            enter_Green_On( );
            runningState.Bottom = Bottom_States::E_Green_On;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Green_On( );
            enter_Green_On_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_On_Flashing;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else if ( isIn_Green_On_State( ) )
      {
        if ( isIn_Green_On_Flashing_State( ) )
        {
          if ( IsSystemOperational( ) && IsLaneOpen( ) )
          {
            exit_Green_On_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_On;
          }
          else if ( IsSystemOperational( ) && IsLaneOnClosing( ) )
          {
            exit_Green_On_Flashing( );
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsLaneClose( ) )
          {
            exit_Green_On_Flashing( );
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            exit_Green_On_Flashing( );
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsStopCheckAndGo( ) || IsCheckAndGo( ) )
          {
            exit_Green_On_Flashing( );
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
        else
        {
          if ( IsSystemOperational( ) && IsLaneOnClosing( ) )
          {
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsLaneClose( ) )
          {
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( ! IsLaneAvailable( ) )
          {
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
          {
            enter_Green_On_Flashing( );
            runningState.Bottom = Bottom_States::E_Green_On_Flashing;
          }
          else if ( IsStopCheckAndGo( ) || IsCheckAndGo( ) )
          {
            enter_Green_Off( );
            runningState.Bottom = Bottom_States::E_Green_Off;
          }
          else
          {
            // left blank. the else block at the end is required by MISRA
          }
        }
      }
      else
      {
        if ( IsSystemSwitching( ) && IsLaneAvailable( ) )
        {
          enter_Green_On( );
          enter_Green_On_Flashing( );
          runningState.Bottom = Bottom_States::E_Green_On_Flashing;
        }
        else if ( IsStopCheckAndGo( ) || IsCheckAndGo( ) )
        {
          enter_Green_Off( );
          runningState.Bottom = Bottom_States::E_Green_Off;
        }
        else
        {
          // left blank. the else block at the end is required by MISRA
        }
      }
    }
    else
    {
      doneBottom = false;
    }
  }
}

void TrafficLight::trigger_SystemDisabled( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneTop = false;
  __attribute__( ( unused ) ) bool doneMiddle = false;
  __attribute__( ( unused ) ) bool doneBottom = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Top_Region( ) )
  {
    doneTop = true;

    if ( isIn_Red_State( ) )
    {
      if ( isIn_Red_Off_State( ) )
      {
        if ( isIn_Red_Off_Flashing_State( ) )
        {
          exit_Red_Off_Flashing( );
          enter_Top_Black( );
          runningState.Top = Top_States::E_Top_Black;
        }
        else
        {
          enter_Top_Black( );
          runningState.Top = Top_States::E_Top_Black;
        }
      }
      else if ( isIn_Red_On_State( ) )
      {
        if ( isIn_Red_On_Flashing_State( ) )
        {
          exit_Red_On_Flashing( );
          enter_Top_Black( );
          runningState.Top = Top_States::E_Top_Black;
        }
        else
        {
          enter_Top_Black( );
          runningState.Top = Top_States::E_Top_Black;
        }
      }
      else
      {
        enter_Top_Black( );
        runningState.Top = Top_States::E_Top_Black;
      }
    }
    else
    {
      doneTop = false;
    }
  }

  if ( isIn_Middle_Region( ) )
  {
    doneMiddle = true;

    if ( isIn_Amber_State( ) )
    {
      if ( isIn_Amber_Off_State( ) )
      {
        if ( isIn_Amber_Off_Flashing_State( ) )
        {
          exit_Amber_Off_Flashing( );
          enter_Middle_Black( );
          runningState.Middle = Middle_States::E_Middle_Black;
        }
        else
        {
          enter_Middle_Black( );
          runningState.Middle = Middle_States::E_Middle_Black;
        }
      }
      else if ( isIn_Amber_On_State( ) )
      {
        if ( isIn_Amber_On_Flashing_State( ) )
        {
          exit_Amber_On_Flashing( );
          enter_Middle_Black( );
          runningState.Middle = Middle_States::E_Middle_Black;
        }
        else
        {
          enter_Middle_Black( );
          runningState.Middle = Middle_States::E_Middle_Black;
        }
      }
      else
      {
        enter_Middle_Black( );
        runningState.Middle = Middle_States::E_Middle_Black;
      }
    }
    else
    {
      doneMiddle = false;
    }
  }

  if ( isIn_Bottom_Region( ) )
  {
    doneBottom = true;

    if ( isIn_Green_State( ) )
    {
      if ( isIn_Green_Off_State( ) )
      {
        if ( isIn_Green_Off_Flashing_State( ) )
        {
          exit_Green_Off_Flashing( );
          enter_Bottom_Black( );
          runningState.Bottom = Bottom_States::E_Bottom_Black;
        }
        else
        {
          enter_Bottom_Black( );
          runningState.Bottom = Bottom_States::E_Bottom_Black;
        }
      }
      else if ( isIn_Green_On_State( ) )
      {
        if ( isIn_Green_On_Flashing_State( ) )
        {
          exit_Green_On_Flashing( );
          enter_Bottom_Black( );
          runningState.Bottom = Bottom_States::E_Bottom_Black;
        }
        else
        {
          enter_Bottom_Black( );
          runningState.Bottom = Bottom_States::E_Bottom_Black;
        }
      }
      else
      {
        enter_Bottom_Black( );
        runningState.Bottom = Bottom_States::E_Bottom_Black;
      }
    }
    else
    {
      doneBottom = false;
    }
  }
}

void TrafficLight::trigger_SystemEnabled( )
{
  __attribute__( ( unused ) ) bool doneMain = false;
  __attribute__( ( unused ) ) bool doneTop = false;
  __attribute__( ( unused ) ) bool doneMiddle = false;
  __attribute__( ( unused ) ) bool doneBottom = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Top_Region( ) )
  {
    doneTop = true;

    if ( isIn_Top_Black_State( ) )
    {
      if ( ! IsLaneAvailable( ) )
      {
        enter_Red_On( );
        runningState.Top = Top_States::E_Red_On;
      }
      else
      {
        enter_Red_On( );
        enter_Red_On_Flashing( );
        runningState.Top = Top_States::E_Red_On_Flashing;
      }
    }
    else
    {
      doneTop = false;
    }
  }

  if ( isIn_Middle_Region( ) )
  {
    doneMiddle = true;

    if ( isIn_Middle_Black_State( ) )
    {
      if ( ! IsLaneAvailable( ) )
      {
        enter_Amber_Off( );
        runningState.Middle = Middle_States::E_Amber_Off;
      }
      else
      {
        enter_Amber_On( );
        enter_Amber_On_Flashing( );
        runningState.Middle = Middle_States::E_Amber_On_Flashing;
      }
    }
    else
    {
      doneMiddle = false;
    }
  }

  if ( isIn_Bottom_Region( ) )
  {
    doneBottom = true;

    if ( isIn_Bottom_Black_State( ) )
    {
      if ( ! IsLaneAvailable( ) )
      {
        enter_Green_Off( );
        runningState.Bottom = Bottom_States::E_Green_Off;
      }
      else
      {
        enter_Green_On( );
        enter_Green_On_Flashing( );
        runningState.Bottom = Bottom_States::E_Green_On_Flashing;
      }
    }
    else
    {
      doneBottom = false;
    }
  }
}

void TrafficLight::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    runningState.Main = Main_States::E_final;
  }
}

void TrafficLight::finalize_Top( )
{
  if ( isIn_Top_Region( ) )
  {
    if ( isIn_Red_State( ) )
    {
      if ( isIn_Red_Off_State( ) )
      {
        if ( isIn_Red_Off_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Red_Off_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Red_Off_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Red_Off_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Red_Off_Flashing ].reset( );
          }
        }
      }
      else if ( isIn_Red_On_State( ) )
      {
        if ( isIn_Red_On_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Red_On_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Red_On_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Red_On_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Red_On_Flashing ].reset( );
          }
        }
      }
      else
      {
        // blank : to satistify MISRA rules
      }
    }
    runningState.Top = Top_States::E_final;
  }
}

void TrafficLight::finalize_Middle( )
{
  if ( isIn_Middle_Region( ) )
  {
    if ( isIn_Amber_State( ) )
    {
      if ( isIn_Amber_Off_State( ) )
      {
        if ( isIn_Amber_Off_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Amber_Off_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Amber_Off_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Amber_Off_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Amber_Off_Flashing ].reset( );
          }
        }
      }
      else if ( isIn_Amber_On_State( ) )
      {
        if ( isIn_Amber_On_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Amber_On_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Amber_On_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Amber_On_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Amber_On_Flashing ].reset( );
          }
        }
      }
      else
      {
        // blank : to satistify MISRA rules
      }
    }
    runningState.Middle = Middle_States::E_final;
  }
}

void TrafficLight::finalize_Bottom( )
{
  if ( isIn_Bottom_Region( ) )
  {
    if ( isIn_Green_State( ) )
    {
      if ( isIn_Green_Off_State( ) )
      {
        if ( isIn_Green_Off_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Green_Off_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Green_Off_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Green_Off_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Green_Off_Flashing ].reset( );
          }
        }
      }
      else if ( isIn_Green_On_State( ) )
      {
        if ( isIn_Green_On_Flashing_State( ) )
        {
          if ( doActionHandler[ doActionIndex_Green_On_Flashing ].has_value( )
            && pthread_equal( doActionHandler[ doActionIndex_Green_On_Flashing ].value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler[ doActionIndex_Green_On_Flashing ].value( ) );
            doActionHandler[ doActionIndex_Green_On_Flashing ].reset( );
          }
        }
      }
      else
      {
        // blank : to satistify MISRA rules
      }
    }
    runningState.Bottom = Bottom_States::E_final;
  }
}

void TrafficLight::terminate( )
{
  finalize_Main( );
}

void TrafficLight::init_Main( )
{
  // fork destination -> `:Top:Black`
  runningState.Main = Main_States::E_Main;
  enter_Top_Black( );
  runningState.Top = Top_States::E_Top_Black;

  // fork destination -> `:Middle:Black`
  runningState.Main = Main_States::E_Main;
  enter_Middle_Black( );
  runningState.Middle = Middle_States::E_Middle_Black;

  // fork destination -> `:Bottom:Black`
  runningState.Main = Main_States::E_Main;
  enter_Bottom_Black( );
  runningState.Bottom = Bottom_States::E_Bottom_Black;
}

void* TrafficLight::doAction_Red_Off_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Red_Off_Flashing ].reset( );

  if ( isIn_Red_Off_Flashing_State( ) )
  {
    exit_Red_Off_Flashing( );
    enter_Red_On( );
    enter_Red_On_Flashing( );
    runningState.Top = Top_States::E_Red_On_Flashing;
  }

  return NULL;
}

void* TrafficLight::doAction_Red_On_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Red_On_Flashing ].reset( );

  if ( isIn_Red_On_Flashing_State( ) )
  {
    exit_Red_On_Flashing( );
    enter_Red_Off( );
    enter_Red_Off_Flashing( );
    runningState.Top = Top_States::E_Red_Off_Flashing;
  }

  return NULL;
}

void* TrafficLight::doAction_Amber_Off_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Amber_Off_Flashing ].reset( );

  if ( isIn_Amber_Off_Flashing_State( ) )
  {
    exit_Amber_Off_Flashing( );
    enter_Amber_On( );
    enter_Amber_On_Flashing( );
    runningState.Middle = Middle_States::E_Amber_On_Flashing;
  }

  return NULL;
}

void* TrafficLight::doAction_Amber_On_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Amber_On_Flashing ].reset( );

  if ( isIn_Amber_On_Flashing_State( ) )
  {
    exit_Amber_On_Flashing( );
    enter_Amber_Off( );
    enter_Amber_Off_Flashing( );
    runningState.Middle = Middle_States::E_Amber_Off_Flashing;
  }

  return NULL;
}

void* TrafficLight::doAction_Green_Off_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Green_Off_Flashing ].reset( );

  if ( isIn_Green_Off_Flashing_State( ) )
  {
    exit_Green_Off_Flashing( );
    enter_Green_On( );
    enter_Green_On_Flashing( );
    runningState.Bottom = Bottom_States::E_Green_On_Flashing;
  }

  return NULL;
}

void* TrafficLight::doAction_Green_On_Flashing( )
{
  CountForFlashing( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_Green_On_Flashing ].reset( );

  if ( isIn_Green_On_Flashing_State( ) )
  {
    exit_Green_On_Flashing( );
    enter_Green_Off( );
    enter_Green_Off_Flashing( );
    runningState.Bottom = Bottom_States::E_Green_Off_Flashing;
  }

  return NULL;
}

void TrafficLight::enter_Red_Off( )
{
  runningState.Top = Top_States::E_Red_Off;

  SwitchRedLightOff( instanceData );
}

void TrafficLight::enter_Red_Off_Flashing( )
{
  runningState.Top = Top_States::E_Red_Off_Flashing;

  doActionHandler[ doActionIndex_Red_Off_Flashing ] = launchDoAction( callDoAction_Red_Off_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Red_On( )
{
  runningState.Top = Top_States::E_Red_On;

  SwitchRedLightOn( instanceData );
}

void TrafficLight::enter_Red_On_Flashing( )
{
  runningState.Top = Top_States::E_Red_On_Flashing;

  doActionHandler[ doActionIndex_Red_On_Flashing ] = launchDoAction( callDoAction_Red_On_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Top_Black( )
{
  runningState.Top = Top_States::E_Top_Black;

  SwitchRedLightOff( instanceData );
}

void TrafficLight::enter_Amber_Off( )
{
  runningState.Middle = Middle_States::E_Amber_Off;

  SwitchAmberLightOff( instanceData );
}

void TrafficLight::enter_Amber_Off_Flashing( )
{
  runningState.Middle = Middle_States::E_Amber_Off_Flashing;

  doActionHandler[ doActionIndex_Amber_Off_Flashing ] = launchDoAction( callDoAction_Amber_Off_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Amber_On( )
{
  runningState.Middle = Middle_States::E_Amber_On;

  SwitchAmberLightOn( instanceData );
}

void TrafficLight::enter_Amber_On_Flashing( )
{
  runningState.Middle = Middle_States::E_Amber_On_Flashing;

  doActionHandler[ doActionIndex_Amber_On_Flashing ] = launchDoAction( callDoAction_Amber_On_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Middle_Black( )
{
  runningState.Middle = Middle_States::E_Middle_Black;

  SwitchAmberLightOff( instanceData );
}

void TrafficLight::enter_Green_Off( )
{
  runningState.Bottom = Bottom_States::E_Green_Off;

  SwitchGreenLightOff( instanceData );
}

void TrafficLight::enter_Green_Off_Flashing( )
{
  runningState.Bottom = Bottom_States::E_Green_Off_Flashing;

  doActionHandler[ doActionIndex_Green_Off_Flashing ] = launchDoAction( callDoAction_Green_Off_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Green_On( )
{
  runningState.Bottom = Bottom_States::E_Green_On;

  SwitchGreenLightOn( instanceData );
}

void TrafficLight::enter_Green_On_Flashing( )
{
  runningState.Bottom = Bottom_States::E_Green_On_Flashing;

  doActionHandler[ doActionIndex_Green_On_Flashing ] = launchDoAction( callDoAction_Green_On_Flashing, this, nullptr, 0 );
}

void TrafficLight::enter_Bottom_Black( )
{
  runningState.Bottom = Bottom_States::E_Bottom_Black;

  SwitchGreenLightOff( instanceData );
}

void TrafficLight::exit_Red_Off_Flashing( )
{
  runningState.Top = Top_States::E_Red_Off_Flashing;
  if ( doActionHandler[ doActionIndex_Red_Off_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Red_Off_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Red_Off_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Red_Off_Flashing ].reset( );
  }
}

void TrafficLight::exit_Red_On_Flashing( )
{
  runningState.Top = Top_States::E_Red_On_Flashing;
  if ( doActionHandler[ doActionIndex_Red_On_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Red_On_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Red_On_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Red_On_Flashing ].reset( );
  }
}

void TrafficLight::exit_Amber_Off_Flashing( )
{
  runningState.Middle = Middle_States::E_Amber_Off_Flashing;
  if ( doActionHandler[ doActionIndex_Amber_Off_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Amber_Off_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Amber_Off_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Amber_Off_Flashing ].reset( );
  }
}

void TrafficLight::exit_Amber_On_Flashing( )
{
  runningState.Middle = Middle_States::E_Amber_On_Flashing;
  if ( doActionHandler[ doActionIndex_Amber_On_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Amber_On_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Amber_On_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Amber_On_Flashing ].reset( );
  }
}

void TrafficLight::exit_Green_Off_Flashing( )
{
  runningState.Bottom = Bottom_States::E_Green_Off_Flashing;
  if ( doActionHandler[ doActionIndex_Green_Off_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Green_Off_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Green_Off_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Green_Off_Flashing ].reset( );
  }
}

void TrafficLight::exit_Green_On_Flashing( )
{
  runningState.Bottom = Bottom_States::E_Green_On_Flashing;
  if ( doActionHandler[ doActionIndex_Green_On_Flashing ].has_value( )
    && pthread_equal( doActionHandler[ doActionIndex_Green_On_Flashing ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_Green_On_Flashing ].value( ) );
    doActionHandler[ doActionIndex_Green_On_Flashing ].reset( );
  }
}

void* TrafficLight::callDoAction_Red_Off_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Red_Off_Flashing( );

  return NULL;
}

void* TrafficLight::callDoAction_Red_On_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Red_On_Flashing( );

  return NULL;
}

void* TrafficLight::callDoAction_Amber_Off_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Amber_Off_Flashing( );

  return NULL;
}

void* TrafficLight::callDoAction_Amber_On_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Amber_On_Flashing( );

  return NULL;
}

void* TrafficLight::callDoAction_Green_Off_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Green_Off_Flashing( );

  return NULL;
}

void* TrafficLight::callDoAction_Green_On_Flashing( void* arg )
{
  TrafficLight* obj = reinterpret_cast< TrafficLight* >( arg );
  obj->doAction_Green_On_Flashing( );

  return NULL;
}

pthread_t TrafficLight::launchDoAction( void *(*threadStart)(void *), TrafficLight* pStateMachine, void *stackAddr, size_t stackSize )
{
  pthread_t thr = 0;

  if ( threadStart != NULL )
  {
    pthread_attr_t attr;

    int err = pthread_attr_init( &attr );
    if ( err == 0 )
    {
      err = pthread_attr_setdetachstate( &attr, PTHREAD_CREATE_DETACHED );

      if ( err == 0 )
      {
        err = pthread_attr_setinheritsched( &attr, PTHREAD_EXPLICIT_SCHED );
      }

      if ( ( err == 0 ) && ( stackAddr != nullptr ) && ( stackSize > 0 ) )
      {
        err = pthread_attr_setstack( &attr, stackAddr, stackSize );
        err = 0;
      }

      if ( err == 0 )
      {
        err = pthread_create( &thr, &attr, threadStart, pStateMachine);
      }

      if ( err != 0 )
      {
        thr = 0;
      }

      pthread_attr_destroy( &attr );
    }
  }

  return thr;
}

// End of TrafficLight.cpp
