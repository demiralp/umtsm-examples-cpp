/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <mutex>
#include <optional>
#include <thread>

#include <TrafficLight_DataType.hh>

class TrafficLight
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_final
    };

  private:
    enum class Top_States
    {
      E_init,
      E_Red,
      E_Red_Off,
      E_Red_Off_Flashing,
      E_Red_On,
      E_Red_On_Flashing,
      E_Top_Black,
      E_final
    };

  private:
    enum class Middle_States
    {
      E_init,
      E_Amber,
      E_Amber_Off,
      E_Amber_Off_Flashing,
      E_Amber_On,
      E_Amber_On_Flashing,
      E_Middle_Black,
      E_final
    };

  private:
    enum class Bottom_States
    {
      E_init,
      E_Green,
      E_Green_Off,
      E_Green_Off_Flashing,
      E_Green_On,
      E_Green_On_Flashing,
      E_Bottom_Black,
      E_final
    };

  private:
    std::mutex guard;

    struct
    {
      Main_States Main;
      Top_States Top;
      Middle_States Middle;
      Bottom_States Bottom;
    } runningState;

  private:
    static constexpr std::size_t MaxNumberOfConcurentProcess = 3U;
    std::optional< pthread_t > doActionHandler[ MaxNumberOfConcurentProcess ];

  public:
    TrafficLight_DataType instanceData;

  public:
    TrafficLight( );
    virtual ~TrafficLight( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;
    bool is_Top_Region_Ready( ) const noexcept;
    bool is_Middle_Region_Ready( ) const noexcept;
    bool is_Bottom_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;
    bool is_Top_Region_Terminated( ) const noexcept;
    bool is_Middle_Region_Terminated( ) const noexcept;
    bool is_Bottom_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;
    bool isIn_Top_Region( ) const noexcept;
    bool isIn_Middle_Region( ) const noexcept;
    bool isIn_Bottom_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_Red_State( ) const noexcept;
    bool isIn_Red_Off_State( ) const noexcept;
    bool isIn_Red_Off_Flashing_State( ) const noexcept;
    bool isIn_Red_On_State( ) const noexcept;
    bool isIn_Red_On_Flashing_State( ) const noexcept;
    bool isIn_Top_Black_State( ) const noexcept;
    bool isIn_Amber_State( ) const noexcept;
    bool isIn_Amber_Off_State( ) const noexcept;
    bool isIn_Amber_Off_Flashing_State( ) const noexcept;
    bool isIn_Amber_On_State( ) const noexcept;
    bool isIn_Amber_On_Flashing_State( ) const noexcept;
    bool isIn_Middle_Black_State( ) const noexcept;
    bool isIn_Green_State( ) const noexcept;
    bool isIn_Green_Off_State( ) const noexcept;
    bool isIn_Green_Off_Flashing_State( ) const noexcept;
    bool isIn_Green_On_State( ) const noexcept;
    bool isIn_Green_On_Flashing_State( ) const noexcept;
    bool isIn_Bottom_Black_State( ) const noexcept;

    void trigger_Check( );
    void trigger_SystemDisabled( );
    void trigger_SystemEnabled( );

    TrafficLight_DataType* getData( ) noexcept;

  private:
    void finalize_Main( );
    void finalize_Top( );
    void finalize_Middle( );
    void finalize_Bottom( );

    void terminate( );

    void* doAction_Red_Off_Flashing( );
    void* doAction_Red_On_Flashing( );
    void* doAction_Amber_Off_Flashing( );
    void* doAction_Amber_On_Flashing( );
    void* doAction_Green_Off_Flashing( );
    void* doAction_Green_On_Flashing( );

    void enter_Red_Off( );
    void enter_Red_Off_Flashing( );
    void enter_Red_On( );
    void enter_Red_On_Flashing( );
    void enter_Top_Black( );
    void enter_Amber_Off( );
    void enter_Amber_Off_Flashing( );
    void enter_Amber_On( );
    void enter_Amber_On_Flashing( );
    void enter_Middle_Black( );
    void enter_Green_Off( );
    void enter_Green_Off_Flashing( );
    void enter_Green_On( );
    void enter_Green_On_Flashing( );
    void enter_Bottom_Black( );

    void exit_Red_Off_Flashing( );
    void exit_Red_On_Flashing( );
    void exit_Amber_Off_Flashing( );
    void exit_Amber_On_Flashing( );
    void exit_Green_Off_Flashing( );
    void exit_Green_On_Flashing( );

    void init_Main( );

  // The interface of the guards
  public:
    virtual bool IsCheckAndGo( ) const;
    virtual bool IsLaneAvailable( ) const;
    virtual bool IsLaneClose( ) const;
    virtual bool IsLaneOnClosing( ) const;
    virtual bool IsLaneOnOpening( ) const;
    virtual bool IsLaneOpen( ) const;
    virtual bool IsStopCheckAndGo( ) const;
    virtual bool IsSystemOperational( ) const;
    virtual bool IsSystemSwitching( ) const;

  // The interface of the actions
  protected:
    virtual void CountForFlashing( TrafficLight_DataType const& input );
    virtual void SwitchAmberLightOff( TrafficLight_DataType const& input );
    virtual void SwitchAmberLightOn( TrafficLight_DataType const& input );
    virtual void SwitchGreenLightOff( TrafficLight_DataType const& input );
    virtual void SwitchGreenLightOn( TrafficLight_DataType const& input );
    virtual void SwitchRedLightOff( TrafficLight_DataType const& input );
    virtual void SwitchRedLightOn( TrafficLight_DataType const& input );

  // The interface of the thread support functions
  private:
    static void* callDoAction_Red_Off_Flashing( void* arg );
    static void* callDoAction_Red_On_Flashing( void* arg );
    static void* callDoAction_Amber_Off_Flashing( void* arg );
    static void* callDoAction_Amber_On_Flashing( void* arg );
    static void* callDoAction_Green_Off_Flashing( void* arg );
    static void* callDoAction_Green_On_Flashing( void* arg );

    static pthread_t launchDoAction( void *(*threadStart)(void *), TrafficLight* pStateMachine, void *stackAddr, size_t stackSize );
  };

  // End of TrafficLight.hh
