/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "ExecutionDirector.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>
#include <unistd.h>

// The implementation of the guards
bool ExecutionDirector::IsControlledModeRequested( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsControlledModeRequested

bool ExecutionDirector::IsNextLane1( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsNextLane1

bool ExecutionDirector::IsNextLane2( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsNextLane2

bool ExecutionDirector::IsNextLane3( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsNextLane3

bool ExecutionDirector::IsNextLane4( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsNextLane4

bool ExecutionDirector::IsNextLanePedestrianLanes( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsNextLanePedestrianLanes

bool ExecutionDirector::IsUncontrolledModeRequested( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsUncontrolledModeRequested

// The implementation of the actions
void ExecutionDirector::CheckRouteRequest( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: CheckRouteRequest

void ExecutionDirector::ClearControlMode( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: ClearControlMode

void ExecutionDirector::DisableSystem( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: DisableSystem

void ExecutionDirector::EnableSystem( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: EnableSystem

void ExecutionDirector::NotifyCrossroad( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: NotifyCrossroad

void ExecutionDirector::OrderOpenLane1( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: OrderOpenLane1

void ExecutionDirector::OrderOpenLane2( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: OrderOpenLane2

void ExecutionDirector::OrderOpenLane3( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: OrderOpenLane3

void ExecutionDirector::OrderOpenLane4( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: OrderOpenLane4

void ExecutionDirector::OrderOpenPedestrianLanes( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: OrderOpenPedestrianLanes

void ExecutionDirector::PrepareForNextLane( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: PrepareForNextLane

void ExecutionDirector::SetControlledMode( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetControlledMode

void ExecutionDirector::SetDisableLane1( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetDisableLane1

void ExecutionDirector::SetDisableLane2( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetDisableLane2

void ExecutionDirector::SetDisableLane3( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetDisableLane3

void ExecutionDirector::SetDisableLane4( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetDisableLane4

void ExecutionDirector::SetEnableLane1( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetEnableLane1

void ExecutionDirector::SetEnableLane2( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetEnableLane2

void ExecutionDirector::SetEnableLane3( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetEnableLane3

void ExecutionDirector::SetEnableLane4( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetEnableLane4

void ExecutionDirector::SetNextOpenLane1( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetNextOpenLane1

void ExecutionDirector::SetNextOpenLane2( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetNextOpenLane2

void ExecutionDirector::SetNextOpenLane3( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetNextOpenLane3

void ExecutionDirector::SetNextOpenLane4( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetNextOpenLane4

void ExecutionDirector::SetNextOpenLanePedestrianLanes( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetNextOpenLanePedestrianLanes

void ExecutionDirector::SetUncontrolledMode( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: SetUncontrolledMode

void ExecutionDirector::StartControlMode( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: StartControlMode

void ExecutionDirector::StartSystemSwitchingTimer( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: StartSystemSwitchingTimer

void ExecutionDirector::StartUncontrolMode( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: StartUncontrolMode

void ExecutionDirector::StopTraffic( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: StopTraffic

void ExecutionDirector::Update( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: Update

void ExecutionDirector::WaitForInterval( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForInterval

void ExecutionDirector::WaitForLane1( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForLane1

void ExecutionDirector::WaitForLane2( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForLane2

void ExecutionDirector::WaitForLane3( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForLane3

void ExecutionDirector::WaitForLane4( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForLane4

void ExecutionDirector::WaitForNextLaneOpen( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForNextLaneOpen

void ExecutionDirector::WaitForPedestrians( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForPedestrians

void ExecutionDirector::WaitForSystemSwitchingTimer( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForSystemSwitchingTimer

void ExecutionDirector::WaitForTrafficStops( [[maybe_unused]] ExecutionDirector_DataType const& input )
{
}  // End of action function: WaitForTrafficStops

// The implementation of the Persistency Functions
void ExecutionDirector::store_Shallow_Operational( [[maybe_unused]] Main_States state, [[maybe_unused]] ExecutionDirector_DataType const& instance ) const
{
}  // End of action function: store_Shallow_Operational

ExecutionDirector::Main_States ExecutionDirector::load_Shallow_Operational( [[maybe_unused]] ExecutionDirector_DataType const& instance ) const
{
  Main_States result = Main_States::E_init;
  return result;
}  // End of loader function: load_Shallow_Operational

// End of ExecutionDirector_Auxilary.cpp
