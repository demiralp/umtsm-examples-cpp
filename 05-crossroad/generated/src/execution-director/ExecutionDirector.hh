/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <mutex>
#include <optional>
#include <thread>

#include <ExecutionDirector_DataType.hh>

class ExecutionDirector
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_StandBy,
      E_SwitchSystem,
      E_GoesToOperational,
      E_GoesToStandby,
      E_SwitchControlState,
      E_Operational,
      E_Uncontrolled,
      E_CheckRequests,
      E_Controlled,
      E_OpenLane1,
      E_OnCloseLane1,
      E_OpenLane2,
      E_OnCloseLane2,
      E_OpenLane3,
      E_OnCloseLane3,
      E_OpenLane4,
      E_OnCloseLane4,
      E_OpenPedestrianLanes,
      E_OnClosePedestrianLanes,
      E_final
    };

  private:
    std::mutex guard;

    struct
    {
      Main_States Main;
    } runningState;

  private:
    std::optional< pthread_t > doActionHandler;

  private:
    struct
    {
      Main_States shallow_Operational;
    } storedState;

  public:
    ExecutionDirector_DataType instanceData;

  public:
    ExecutionDirector( );
    virtual ~ExecutionDirector( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_StandBy_State( ) const noexcept;
    bool isIn_SwitchSystem_State( ) const noexcept;
    bool isIn_GoesToOperational_State( ) const noexcept;
    bool isIn_GoesToStandby_State( ) const noexcept;
    bool isIn_SwitchControlState_State( ) const noexcept;
    bool isIn_Operational_State( ) const noexcept;
    bool isIn_Uncontrolled_State( ) const noexcept;
    bool isIn_CheckRequests_State( ) const noexcept;
    bool isIn_Controlled_State( ) const noexcept;
    bool isIn_OpenLane1_State( ) const noexcept;
    bool isIn_OnCloseLane1_State( ) const noexcept;
    bool isIn_OpenLane2_State( ) const noexcept;
    bool isIn_OnCloseLane2_State( ) const noexcept;
    bool isIn_OpenLane3_State( ) const noexcept;
    bool isIn_OnCloseLane3_State( ) const noexcept;
    bool isIn_OpenLane4_State( ) const noexcept;
    bool isIn_OnCloseLane4_State( ) const noexcept;
    bool isIn_OpenPedestrianLanes_State( ) const noexcept;
    bool isIn_OnClosePedestrianLanes_State( ) const noexcept;

    void trigger_DisableLane1( );
    void trigger_DisableLane2( );
    void trigger_DisableLane3( );
    void trigger_DisableLane4( );
    void trigger_EnableLane1( );
    void trigger_EnableLane2( );
    void trigger_EnableLane3( );
    void trigger_EnableLane4( );
    void trigger_OpenLane1( );
    void trigger_OpenLane2( );
    void trigger_OpenLane3( );
    void trigger_OpenLane4( );
    void trigger_OpenPedestrianLanes( );
    void trigger_ReleaseControl( );
    void trigger_SystemDisabled( );
    void trigger_SystemEnabled( );
    void trigger_TakeControl( );

    ExecutionDirector_DataType* getData( ) noexcept;

  private:
    void finalize_Main( );
    void terminate( );

    void storeEntireStates( );

    void* doAction_GoesToOperational( );
    void* doAction_GoesToStandby( );
    void* doAction_SwitchControlState( );
    void* doAction_CheckRequests( );
    void* doAction_OpenLane1( );
    void* doAction_OnCloseLane1( );
    void* doAction_OpenLane2( );
    void* doAction_OnCloseLane2( );
    void* doAction_OpenLane3( );
    void* doAction_OnCloseLane3( );
    void* doAction_OpenLane4( );
    void* doAction_OnCloseLane4( );
    void* doAction_OpenPedestrianLanes( );
    void* doAction_OnClosePedestrianLanes( );

    void enter_StandBy( );
    void enter_SwitchSystem( );
    void enter_GoesToOperational( );
    void enter_GoesToStandby( );
    void enter_SwitchControlState( );
    void enter_Uncontrolled( );
    void enter_CheckRequests( );
    void enter_Controlled( );
    void enter_OpenLane1( );
    void enter_OnCloseLane1( );
    void enter_OpenLane2( );
    void enter_OnCloseLane2( );
    void enter_OpenLane3( );
    void enter_OnCloseLane3( );
    void enter_OpenLane4( );
    void enter_OnCloseLane4( );
    void enter_OpenPedestrianLanes( );
    void enter_OnClosePedestrianLanes( );

    void exit_StandBy( );
    void exit_GoesToOperational( );
    void exit_GoesToStandby( );
    void exit_SwitchControlState( );
    void exit_Operational( );
    void exit_CheckRequests( );
    void exit_OpenLane1( );
    void exit_OnCloseLane1( );
    void exit_OpenLane2( );
    void exit_OnCloseLane2( );
    void exit_OpenLane3( );
    void exit_OnCloseLane3( );
    void exit_OpenLane4( );
    void exit_OnCloseLane4( );
    void exit_OpenPedestrianLanes( );
    void exit_OnClosePedestrianLanes( );

    void init_Main( );
    void init_Operational( );
    void init_Uncontrolled( );
    void init_Controlled( );

  // The interface of the guards
  public:
    virtual bool IsControlledModeRequested( ) const;
    virtual bool IsNextLane1( ) const;
    virtual bool IsNextLane2( ) const;
    virtual bool IsNextLane3( ) const;
    virtual bool IsNextLane4( ) const;
    virtual bool IsNextLanePedestrianLanes( ) const;
    virtual bool IsUncontrolledModeRequested( ) const;

  // The interface of the actions
  protected:
    virtual void CheckRouteRequest( ExecutionDirector_DataType const& input );
    virtual void ClearControlMode( ExecutionDirector_DataType const& input );
    virtual void DisableSystem( ExecutionDirector_DataType const& input );
    virtual void EnableSystem( ExecutionDirector_DataType const& input );
    virtual void NotifyCrossroad( ExecutionDirector_DataType const& input );
    virtual void OrderOpenLane1( ExecutionDirector_DataType const& input );
    virtual void OrderOpenLane2( ExecutionDirector_DataType const& input );
    virtual void OrderOpenLane3( ExecutionDirector_DataType const& input );
    virtual void OrderOpenLane4( ExecutionDirector_DataType const& input );
    virtual void OrderOpenPedestrianLanes( ExecutionDirector_DataType const& input );
    virtual void PrepareForNextLane( ExecutionDirector_DataType const& input );
    virtual void SetControlledMode( ExecutionDirector_DataType const& input );
    virtual void SetDisableLane1( ExecutionDirector_DataType const& input );
    virtual void SetDisableLane2( ExecutionDirector_DataType const& input );
    virtual void SetDisableLane3( ExecutionDirector_DataType const& input );
    virtual void SetDisableLane4( ExecutionDirector_DataType const& input );
    virtual void SetEnableLane1( ExecutionDirector_DataType const& input );
    virtual void SetEnableLane2( ExecutionDirector_DataType const& input );
    virtual void SetEnableLane3( ExecutionDirector_DataType const& input );
    virtual void SetEnableLane4( ExecutionDirector_DataType const& input );
    virtual void SetNextOpenLane1( ExecutionDirector_DataType const& input );
    virtual void SetNextOpenLane2( ExecutionDirector_DataType const& input );
    virtual void SetNextOpenLane3( ExecutionDirector_DataType const& input );
    virtual void SetNextOpenLane4( ExecutionDirector_DataType const& input );
    virtual void SetNextOpenLanePedestrianLanes( ExecutionDirector_DataType const& input );
    virtual void SetUncontrolledMode( ExecutionDirector_DataType const& input );
    virtual void StartControlMode( ExecutionDirector_DataType const& input );
    virtual void StartSystemSwitchingTimer( ExecutionDirector_DataType const& input );
    virtual void StartUncontrolMode( ExecutionDirector_DataType const& input );
    virtual void StopTraffic( ExecutionDirector_DataType const& input );
    virtual void Update( ExecutionDirector_DataType const& input );
    virtual void WaitForInterval( ExecutionDirector_DataType const& input );
    virtual void WaitForLane1( ExecutionDirector_DataType const& input );
    virtual void WaitForLane2( ExecutionDirector_DataType const& input );
    virtual void WaitForLane3( ExecutionDirector_DataType const& input );
    virtual void WaitForLane4( ExecutionDirector_DataType const& input );
    virtual void WaitForNextLaneOpen( ExecutionDirector_DataType const& input );
    virtual void WaitForPedestrians( ExecutionDirector_DataType const& input );
    virtual void WaitForSystemSwitchingTimer( ExecutionDirector_DataType const& input );
    virtual void WaitForTrafficStops( ExecutionDirector_DataType const& input );

  // The interface of the Persistency Functions
  protected:
    virtual void store_Shallow_Operational( Main_States state, ExecutionDirector_DataType const& instance ) const;
    virtual Main_States load_Shallow_Operational( ExecutionDirector_DataType const& instance ) const;

  // The interface of the thread support functions
  private:
    static void* callDoAction_GoesToOperational( void* arg );
    static void* callDoAction_GoesToStandby( void* arg );
    static void* callDoAction_SwitchControlState( void* arg );
    static void* callDoAction_CheckRequests( void* arg );
    static void* callDoAction_OpenLane1( void* arg );
    static void* callDoAction_OnCloseLane1( void* arg );
    static void* callDoAction_OpenLane2( void* arg );
    static void* callDoAction_OnCloseLane2( void* arg );
    static void* callDoAction_OpenLane3( void* arg );
    static void* callDoAction_OnCloseLane3( void* arg );
    static void* callDoAction_OpenLane4( void* arg );
    static void* callDoAction_OnCloseLane4( void* arg );
    static void* callDoAction_OpenPedestrianLanes( void* arg );
    static void* callDoAction_OnClosePedestrianLanes( void* arg );

    static pthread_t launchDoAction( void *(*threadStart)(void *), ExecutionDirector* pStateMachine, void *stackAddr, size_t stackSize );
  };

  // End of ExecutionDirector.hh
