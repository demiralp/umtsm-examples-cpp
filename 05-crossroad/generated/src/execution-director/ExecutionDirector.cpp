/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "ExecutionDirector.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>
#include <unistd.h>

ExecutionDirector::ExecutionDirector( )
{
  initialize( );
}

ExecutionDirector::~ExecutionDirector( )
{
  deinitialize( );
}

void ExecutionDirector::initialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void ExecutionDirector::deinitialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void ExecutionDirector::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    std::lock_guard<std::mutex> lockGuard( guard );

    storedState.shallow_Operational = load_Shallow_Operational( instanceData );

    init_Main( );
  }
}

void ExecutionDirector::halt( )
{
  finalize_Main( );
}

bool ExecutionDirector::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool ExecutionDirector::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool ExecutionDirector::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool ExecutionDirector::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool ExecutionDirector::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool ExecutionDirector::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool ExecutionDirector::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Main ) || 
      ( runningState.Main == Main_States::E_StandBy ) || 
      ( runningState.Main == Main_States::E_SwitchSystem ) || 
      ( runningState.Main == Main_States::E_SwitchControlState ) || 
      ( runningState.Main == Main_States::E_Operational ) || 
      ( runningState.Main == Main_States::E_GoesToOperational ) || 
      ( runningState.Main == Main_States::E_GoesToStandby ) || 
      ( runningState.Main == Main_States::E_Uncontrolled ) || 
      ( runningState.Main == Main_States::E_Controlled ) || 
      ( runningState.Main == Main_States::E_CheckRequests ) || 
      ( runningState.Main == Main_States::E_OpenLane1 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane1 ) || 
      ( runningState.Main == Main_States::E_OpenLane2 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane2 ) || 
      ( runningState.Main == Main_States::E_OpenLane3 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane3 ) || 
      ( runningState.Main == Main_States::E_OpenLane4 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane4 ) || 
      ( runningState.Main == Main_States::E_OpenPedestrianLanes ) || 
      ( runningState.Main == Main_States::E_OnClosePedestrianLanes ) );

  return result;
}

bool ExecutionDirector::isIn_StandBy_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_StandBy );

  return result;
}

bool ExecutionDirector::isIn_SwitchSystem_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_SwitchSystem ) || 
      ( runningState.Main == Main_States::E_GoesToOperational ) || 
      ( runningState.Main == Main_States::E_GoesToStandby ) );

  return result;
}

bool ExecutionDirector::isIn_GoesToOperational_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_GoesToOperational );

  return result;
}

bool ExecutionDirector::isIn_GoesToStandby_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_GoesToStandby );

  return result;
}

bool ExecutionDirector::isIn_SwitchControlState_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_SwitchControlState );

  return result;
}

bool ExecutionDirector::isIn_Operational_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Operational ) || 
      ( runningState.Main == Main_States::E_Uncontrolled ) || 
      ( runningState.Main == Main_States::E_Controlled ) || 
      ( runningState.Main == Main_States::E_CheckRequests ) || 
      ( runningState.Main == Main_States::E_OpenLane1 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane1 ) || 
      ( runningState.Main == Main_States::E_OpenLane2 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane2 ) || 
      ( runningState.Main == Main_States::E_OpenLane3 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane3 ) || 
      ( runningState.Main == Main_States::E_OpenLane4 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane4 ) || 
      ( runningState.Main == Main_States::E_OpenPedestrianLanes ) || 
      ( runningState.Main == Main_States::E_OnClosePedestrianLanes ) );

  return result;
}

bool ExecutionDirector::isIn_Uncontrolled_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Uncontrolled ) || 
      ( runningState.Main == Main_States::E_CheckRequests ) );

  return result;
}

bool ExecutionDirector::isIn_CheckRequests_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_CheckRequests );

  return result;
}

bool ExecutionDirector::isIn_Controlled_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Controlled ) || 
      ( runningState.Main == Main_States::E_OpenLane1 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane1 ) || 
      ( runningState.Main == Main_States::E_OpenLane2 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane2 ) || 
      ( runningState.Main == Main_States::E_OpenLane3 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane3 ) || 
      ( runningState.Main == Main_States::E_OpenLane4 ) || 
      ( runningState.Main == Main_States::E_OnCloseLane4 ) || 
      ( runningState.Main == Main_States::E_OpenPedestrianLanes ) || 
      ( runningState.Main == Main_States::E_OnClosePedestrianLanes ) );

  return result;
}

bool ExecutionDirector::isIn_OpenLane1_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OpenLane1 );

  return result;
}

bool ExecutionDirector::isIn_OnCloseLane1_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OnCloseLane1 );

  return result;
}

bool ExecutionDirector::isIn_OpenLane2_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OpenLane2 );

  return result;
}

bool ExecutionDirector::isIn_OnCloseLane2_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OnCloseLane2 );

  return result;
}

bool ExecutionDirector::isIn_OpenLane3_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OpenLane3 );

  return result;
}

bool ExecutionDirector::isIn_OnCloseLane3_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OnCloseLane3 );

  return result;
}

bool ExecutionDirector::isIn_OpenLane4_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OpenLane4 );

  return result;
}

bool ExecutionDirector::isIn_OnCloseLane4_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OnCloseLane4 );

  return result;
}

bool ExecutionDirector::isIn_OpenPedestrianLanes_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OpenPedestrianLanes );

  return result;
}

bool ExecutionDirector::isIn_OnClosePedestrianLanes_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_OnClosePedestrianLanes );

  return result;
}

ExecutionDirector_DataType* ExecutionDirector::getData( ) noexcept
{
  ExecutionDirector_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void ExecutionDirector::trigger_DisableLane1( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetDisableLane1( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetDisableLane1( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetDisableLane1( instanceData );
      }
      else
      {
        SetDisableLane1( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetDisableLane1( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else
        {
          SetDisableLane1( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetDisableLane1( instanceData );
        }
        else
        {
          SetDisableLane1( instanceData );
        }
      }
      else
      {
        SetDisableLane1( instanceData );
      }
    }
    else
    {
      SetDisableLane1( instanceData );
    }
  }
}

void ExecutionDirector::trigger_DisableLane2( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetDisableLane2( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetDisableLane2( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetDisableLane2( instanceData );
      }
      else
      {
        SetDisableLane2( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetDisableLane2( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else
        {
          SetDisableLane2( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetDisableLane2( instanceData );
        }
        else
        {
          SetDisableLane2( instanceData );
        }
      }
      else
      {
        SetDisableLane2( instanceData );
      }
    }
    else
    {
      SetDisableLane2( instanceData );
    }
  }
}

void ExecutionDirector::trigger_DisableLane3( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetDisableLane3( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetDisableLane3( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetDisableLane3( instanceData );
      }
      else
      {
        SetDisableLane3( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetDisableLane3( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else
        {
          SetDisableLane3( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetDisableLane3( instanceData );
        }
        else
        {
          SetDisableLane3( instanceData );
        }
      }
      else
      {
        SetDisableLane3( instanceData );
      }
    }
    else
    {
      SetDisableLane3( instanceData );
    }
  }
}

void ExecutionDirector::trigger_DisableLane4( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetDisableLane4( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetDisableLane4( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetDisableLane4( instanceData );
      }
      else
      {
        SetDisableLane4( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetDisableLane4( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else
        {
          SetDisableLane4( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetDisableLane4( instanceData );
        }
        else
        {
          SetDisableLane4( instanceData );
        }
      }
      else
      {
        SetDisableLane4( instanceData );
      }
    }
    else
    {
      SetDisableLane4( instanceData );
    }
  }
}

void ExecutionDirector::trigger_EnableLane1( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetEnableLane1( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetEnableLane1( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetEnableLane1( instanceData );
      }
      else
      {
        SetEnableLane1( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetEnableLane1( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else
        {
          SetEnableLane1( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetEnableLane1( instanceData );
        }
        else
        {
          SetEnableLane1( instanceData );
        }
      }
      else
      {
        SetEnableLane1( instanceData );
      }
    }
    else
    {
      SetEnableLane1( instanceData );
    }
  }
}

void ExecutionDirector::trigger_EnableLane2( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetEnableLane2( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetEnableLane2( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetEnableLane2( instanceData );
      }
      else
      {
        SetEnableLane2( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetEnableLane2( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else
        {
          SetEnableLane2( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetEnableLane2( instanceData );
        }
        else
        {
          SetEnableLane2( instanceData );
        }
      }
      else
      {
        SetEnableLane2( instanceData );
      }
    }
    else
    {
      SetEnableLane2( instanceData );
    }
  }
}

void ExecutionDirector::trigger_EnableLane3( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetEnableLane3( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetEnableLane3( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetEnableLane3( instanceData );
      }
      else
      {
        SetEnableLane3( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetEnableLane3( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else
        {
          SetEnableLane3( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetEnableLane3( instanceData );
        }
        else
        {
          SetEnableLane3( instanceData );
        }
      }
      else
      {
        SetEnableLane3( instanceData );
      }
    }
    else
    {
      SetEnableLane3( instanceData );
    }
  }
}

void ExecutionDirector::trigger_EnableLane4( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_StandBy_State( ) )
    {
      SetEnableLane4( instanceData );
    }
    else if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        SetEnableLane4( instanceData );
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        SetEnableLane4( instanceData );
      }
      else
      {
        SetEnableLane4( instanceData );
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      SetEnableLane4( instanceData );
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else
        {
          SetEnableLane4( instanceData );
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          SetEnableLane4( instanceData );
        }
        else
        {
          SetEnableLane4( instanceData );
        }
      }
      else
      {
        SetEnableLane4( instanceData );
      }
    }
    else
    {
      SetEnableLane4( instanceData );
    }
  }
}

void ExecutionDirector::trigger_OpenLane1( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
    else
    {
      SetNextOpenLane1( instanceData );
      Update( instanceData );
    }
  }
}

void ExecutionDirector::trigger_OpenLane2( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
    else
    {
      SetNextOpenLane2( instanceData );
      Update( instanceData );
    }
  }
}

void ExecutionDirector::trigger_OpenLane3( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
    else
    {
      SetNextOpenLane3( instanceData );
      Update( instanceData );
    }
  }
}

void ExecutionDirector::trigger_OpenLane4( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
    else
    {
      SetNextOpenLane4( instanceData );
      Update( instanceData );
    }
  }
}

void ExecutionDirector::trigger_OpenPedestrianLanes( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
    else
    {
      SetNextOpenLanePedestrianLanes( instanceData );
      Update( instanceData );
    }
  }
}

void ExecutionDirector::trigger_ReleaseControl( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_StandBy_State( ) )
  {
    SetUncontrolledMode( instanceData );

    exit_StandBy( );
    enter_SwitchSystem( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }

  if ( isIn_GoesToOperational_State( ) )
  {
    SetUncontrolledMode( instanceData );
  }
  else if ( isIn_GoesToStandby_State( ) )
  {
    SetUncontrolledMode( instanceData );

    exit_GoesToStandby( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }
  else if ( isIn_SwitchControlState_State( ) )
  {
    SetUncontrolledMode( instanceData );
  }
  else if ( isIn_Controlled_State( ) )
  {
    if ( isIn_OpenLane1_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OpenLane1( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OnCloseLane1_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OnCloseLane1( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OpenLane2_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OpenLane2( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OnCloseLane2_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OnCloseLane2( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OpenLane3_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OpenLane3( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OnCloseLane3_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OnCloseLane3( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OpenLane4_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OpenLane4( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OnCloseLane4_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OnCloseLane4( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OpenPedestrianLanes_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OpenPedestrianLanes( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else if ( isIn_OnClosePedestrianLanes_State( ) )
    {
      SetUncontrolledMode( instanceData );

      exit_OnClosePedestrianLanes( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else
    {
      SetUncontrolledMode( instanceData );

      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
  }
  else
  {
    // left blank. the else block at the end is required by MISRA
  }
}

void ExecutionDirector::trigger_SystemDisabled( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_GoesToOperational_State( ) )
  {
    exit_GoesToOperational( );
    enter_GoesToStandby( );
    runningState.Main = Main_States::E_GoesToStandby;
  }

  if ( isIn_SwitchControlState_State( ) )
  {
    exit_SwitchControlState( );
    enter_SwitchSystem( );
    enter_GoesToStandby( );
    runningState.Main = Main_States::E_GoesToStandby;
  }
  else if ( isIn_Operational_State( ) )
  {
    if ( isIn_Uncontrolled_State( ) )
    {
      if ( isIn_CheckRequests_State( ) )
      {
        exit_CheckRequests( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else
      {
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
    }
    else if ( isIn_Controlled_State( ) )
    {
      if ( isIn_OpenLane1_State( ) )
      {
        exit_OpenLane1( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OnCloseLane1_State( ) )
      {
        exit_OnCloseLane1( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OpenLane2_State( ) )
      {
        exit_OpenLane2( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OnCloseLane2_State( ) )
      {
        exit_OnCloseLane2( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OpenLane3_State( ) )
      {
        exit_OpenLane3( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OnCloseLane3_State( ) )
      {
        exit_OnCloseLane3( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OpenLane4_State( ) )
      {
        exit_OpenLane4( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OnCloseLane4_State( ) )
      {
        exit_OnCloseLane4( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OpenPedestrianLanes_State( ) )
      {
        exit_OpenPedestrianLanes( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else if ( isIn_OnClosePedestrianLanes_State( ) )
      {
        exit_OnClosePedestrianLanes( );
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
      else
      {
        exit_Operational( );
        enter_SwitchSystem( );
        enter_GoesToStandby( );
        runningState.Main = Main_States::E_GoesToStandby;
      }
    }
    else
    {
      exit_Operational( );
      enter_SwitchSystem( );
      enter_GoesToStandby( );
      runningState.Main = Main_States::E_GoesToStandby;
    }
  }
  else
  {
    // left blank. the else block at the end is required by MISRA
  }
}

void ExecutionDirector::trigger_SystemEnabled( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_StandBy_State( ) )
  {
    ClearControlMode( instanceData );

    exit_StandBy( );
    enter_SwitchSystem( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }

  if ( isIn_GoesToStandby_State( ) )
  {
    exit_GoesToStandby( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }
}

void ExecutionDirector::trigger_TakeControl( )
{
  __attribute__( ( unused ) ) bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_StandBy_State( ) )
  {
    SetControlledMode( instanceData );

    exit_StandBy( );
    enter_SwitchSystem( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }

  if ( isIn_GoesToOperational_State( ) )
  {
    SetControlledMode( instanceData );
  }
  else if ( isIn_GoesToStandby_State( ) )
  {
    SetControlledMode( instanceData );

    exit_GoesToStandby( );
    enter_GoesToOperational( );
    runningState.Main = Main_States::E_GoesToOperational;
  }
  else if ( isIn_SwitchControlState_State( ) )
  {
    SetControlledMode( instanceData );
  }
  else if ( isIn_Uncontrolled_State( ) )
  {
    if ( isIn_CheckRequests_State( ) )
    {
      SetControlledMode( instanceData );

      exit_CheckRequests( );
      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
    else
    {
      SetControlledMode( instanceData );

      exit_Operational( );
      enter_SwitchControlState( );
      runningState.Main = Main_States::E_SwitchControlState;
    }
  }
  else
  {
    // left blank. the else block at the end is required by MISRA
  }
}

void ExecutionDirector::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    if ( isIn_SwitchSystem_State( ) )
    {
      if ( isIn_GoesToOperational_State( ) )
      {
        if ( doActionHandler.has_value( )
          && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
        {
          pthread_cancel( doActionHandler.value( ) );
          doActionHandler.reset( );
        }
      }
      else if ( isIn_GoesToStandby_State( ) )
      {
        if ( doActionHandler.has_value( )
          && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
        {
          pthread_cancel( doActionHandler.value( ) );
          doActionHandler.reset( );
        }
      }
      else
      {
        // blank : to satistify MISRA rules
      }
    }
    else if ( isIn_SwitchControlState_State( ) )
    {
      if ( doActionHandler.has_value( )
        && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
      {
        pthread_cancel( doActionHandler.value( ) );
        doActionHandler.reset( );
      }
    }
    else if ( isIn_Operational_State( ) )
    {
      if ( isIn_Uncontrolled_State( ) )
      {
        if ( isIn_CheckRequests_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
      }
      else if ( isIn_Controlled_State( ) )
      {
        if ( isIn_OpenLane1_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OnCloseLane1_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OpenLane2_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OnCloseLane2_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OpenLane3_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OnCloseLane3_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OpenLane4_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OnCloseLane4_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OpenPedestrianLanes_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else if ( isIn_OnClosePedestrianLanes_State( ) )
        {
          if ( doActionHandler.has_value( )
            && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
          {
            pthread_cancel( doActionHandler.value( ) );
            doActionHandler.reset( );
          }
        }
        else
        {
          // blank : to satistify MISRA rules
        }
      }
      else
      {
        // blank : to satistify MISRA rules
      }
    }
    else
    {
      // blank : to satistify MISRA rules
    }
    runningState.Main = Main_States::E_final;
  }
}

void ExecutionDirector::terminate( )
{
  storeEntireStates( );
  finalize_Main( );
}

void ExecutionDirector::storeEntireStates( )
{
  store_Shallow_Operational( storedState.shallow_Operational, instanceData );
}

void ExecutionDirector::init_Main( )
{
  enter_StandBy( );
  runningState.Main = Main_States::E_StandBy;
}

void ExecutionDirector::init_Operational( )
{
  // started by history stored
  switch ( storedState.shallow_Operational )
  {
    case Main_States::E_Uncontrolled:
    {
      enter_Uncontrolled( );
      init_Uncontrolled( );
      break;
    }
    case Main_States::E_Controlled:
    {
      enter_Controlled( );
      init_Controlled( );
      break;
    }
    default:
    {
      enter_Uncontrolled( );
      init_Uncontrolled( );
      break;
    }
  }
}

void ExecutionDirector::init_Uncontrolled( )
{
  enter_CheckRequests( );
  runningState.Main = Main_States::E_CheckRequests;
  storedState.shallow_Operational = Main_States::E_Uncontrolled;
  store_Shallow_Operational( storedState.shallow_Operational, instanceData );
}

void ExecutionDirector::init_Controlled( )
{
  StopTraffic( instanceData );

  enter_OnClosePedestrianLanes( );
  runningState.Main = Main_States::E_OnClosePedestrianLanes;
  storedState.shallow_Operational = Main_States::E_Controlled;
  store_Shallow_Operational( storedState.shallow_Operational, instanceData );
}

void* ExecutionDirector::doAction_GoesToOperational( )
{
  WaitForSystemSwitchingTimer( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_GoesToOperational_State( ) )
  {
    if ( IsControlledModeRequested( ) )
    {
      exit_GoesToOperational( );
      enter_Controlled( );
      init_Controlled( );
    }
    else if ( IsUncontrolledModeRequested( ) )
    {
      exit_GoesToOperational( );
      enter_Uncontrolled( );
      init_Uncontrolled( );
    }
    else
    {
      exit_GoesToOperational( );
      init_Operational( );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_GoesToStandby( )
{
  WaitForSystemSwitchingTimer( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_GoesToStandby_State( ) )
  {
    exit_GoesToStandby( );
    enter_StandBy( );
    runningState.Main = Main_States::E_StandBy;
  }

  return NULL;
}

void* ExecutionDirector::doAction_SwitchControlState( )
{
  WaitForTrafficStops( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_SwitchControlState_State( ) )
  {
    if ( IsControlledModeRequested( ) )
    {
      exit_SwitchControlState( );
      enter_Controlled( );
      init_Controlled( );
    }
    else if ( IsUncontrolledModeRequested( ) )
    {
      exit_SwitchControlState( );
      enter_Uncontrolled( );
      init_Uncontrolled( );
    }
    else
    {
      exit_SwitchControlState( );
      init_Operational( );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_CheckRequests( )
{
  WaitForInterval( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_CheckRequests_State( ) )
  {
    exit_CheckRequests( );
    enter_CheckRequests( );
    runningState.Main = Main_States::E_CheckRequests;
    storedState.shallow_Operational = Main_States::E_Uncontrolled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OpenLane1( )
{
  WaitForLane1( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OpenLane1_State( ) )
  {
    exit_OpenLane1( );
    enter_OnCloseLane1( );
    runningState.Main = Main_States::E_OnCloseLane1;
    storedState.shallow_Operational = Main_States::E_Controlled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OnCloseLane1( )
{
  WaitForNextLaneOpen( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OnCloseLane1_State( ) )
  {
    if ( IsNextLane2( ) )
    {
      exit_OnCloseLane1( );
      enter_OpenLane2( );
      runningState.Main = Main_States::E_OpenLane2;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane3( ) )
    {
      exit_OnCloseLane1( );
      enter_OpenLane3( );
      runningState.Main = Main_States::E_OpenLane3;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane4( ) )
    {
      exit_OnCloseLane1( );
      enter_OpenLane4( );
      runningState.Main = Main_States::E_OpenLane4;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLanePedestrianLanes( ) )
    {
      exit_OnCloseLane1( );
      enter_OpenPedestrianLanes( );
      runningState.Main = Main_States::E_OpenPedestrianLanes;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else
    {
      exit_OnCloseLane1( );
      enter_OpenLane2( );
      runningState.Main = Main_States::E_OpenLane2;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_OpenLane2( )
{
  WaitForLane2( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OpenLane2_State( ) )
  {
    exit_OpenLane2( );
    enter_OnCloseLane2( );
    runningState.Main = Main_States::E_OnCloseLane2;
    storedState.shallow_Operational = Main_States::E_Controlled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OnCloseLane2( )
{
  WaitForNextLaneOpen( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OnCloseLane2_State( ) )
  {
    if ( IsNextLane1( ) )
    {
      exit_OnCloseLane2( );
      enter_OpenLane1( );
      runningState.Main = Main_States::E_OpenLane1;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane3( ) )
    {
      exit_OnCloseLane2( );
      enter_OpenLane3( );
      runningState.Main = Main_States::E_OpenLane3;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane4( ) )
    {
      exit_OnCloseLane2( );
      enter_OpenLane4( );
      runningState.Main = Main_States::E_OpenLane4;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLanePedestrianLanes( ) )
    {
      exit_OnCloseLane2( );
      enter_OpenPedestrianLanes( );
      runningState.Main = Main_States::E_OpenPedestrianLanes;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else
    {
      exit_OnCloseLane2( );
      enter_OpenLane3( );
      runningState.Main = Main_States::E_OpenLane3;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_OpenLane3( )
{
  WaitForLane3( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OpenLane3_State( ) )
  {
    exit_OpenLane3( );
    enter_OnCloseLane3( );
    runningState.Main = Main_States::E_OnCloseLane3;
    storedState.shallow_Operational = Main_States::E_Controlled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OnCloseLane3( )
{
  WaitForNextLaneOpen( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OnCloseLane3_State( ) )
  {
    if ( IsNextLane1( ) )
    {
      exit_OnCloseLane3( );
      enter_OpenLane1( );
      runningState.Main = Main_States::E_OpenLane1;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane2( ) )
    {
      exit_OnCloseLane3( );
      enter_OpenLane2( );
      runningState.Main = Main_States::E_OpenLane2;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane4( ) )
    {
      exit_OnCloseLane3( );
      enter_OpenLane4( );
      runningState.Main = Main_States::E_OpenLane4;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLanePedestrianLanes( ) )
    {
      exit_OnCloseLane3( );
      enter_OpenPedestrianLanes( );
      runningState.Main = Main_States::E_OpenPedestrianLanes;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else
    {
      exit_OnCloseLane3( );
      enter_OpenLane4( );
      runningState.Main = Main_States::E_OpenLane4;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_OpenLane4( )
{
  WaitForLane4( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OpenLane4_State( ) )
  {
    exit_OpenLane4( );
    enter_OnCloseLane4( );
    runningState.Main = Main_States::E_OnCloseLane4;
    storedState.shallow_Operational = Main_States::E_Controlled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OnCloseLane4( )
{
  WaitForNextLaneOpen( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OnCloseLane4_State( ) )
  {
    if ( IsNextLane1( ) )
    {
      exit_OnCloseLane4( );
      enter_OpenLane1( );
      runningState.Main = Main_States::E_OpenLane1;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane2( ) )
    {
      exit_OnCloseLane4( );
      enter_OpenLane2( );
      runningState.Main = Main_States::E_OpenLane2;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane3( ) )
    {
      exit_OnCloseLane4( );
      enter_OpenLane3( );
      runningState.Main = Main_States::E_OpenLane3;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLanePedestrianLanes( ) )
    {
      exit_OnCloseLane4( );
      enter_OpenPedestrianLanes( );
      runningState.Main = Main_States::E_OpenPedestrianLanes;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else
    {
      exit_OnCloseLane4( );
      enter_OpenPedestrianLanes( );
      runningState.Main = Main_States::E_OpenPedestrianLanes;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
  }

  return NULL;
}

void* ExecutionDirector::doAction_OpenPedestrianLanes( )
{
  WaitForPedestrians( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OpenPedestrianLanes_State( ) )
  {
    exit_OpenPedestrianLanes( );
    enter_OnClosePedestrianLanes( );
    runningState.Main = Main_States::E_OnClosePedestrianLanes;
    storedState.shallow_Operational = Main_States::E_Controlled;
    store_Shallow_Operational( storedState.shallow_Operational, instanceData );
  }

  return NULL;
}

void* ExecutionDirector::doAction_OnClosePedestrianLanes( )
{
  WaitForNextLaneOpen( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler.reset( );

  if ( isIn_OnClosePedestrianLanes_State( ) )
  {
    if ( IsNextLane1( ) )
    {
      exit_OnClosePedestrianLanes( );
      enter_OpenLane1( );
      runningState.Main = Main_States::E_OpenLane1;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane2( ) )
    {
      exit_OnClosePedestrianLanes( );
      enter_OpenLane2( );
      runningState.Main = Main_States::E_OpenLane2;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane3( ) )
    {
      exit_OnClosePedestrianLanes( );
      enter_OpenLane3( );
      runningState.Main = Main_States::E_OpenLane3;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else if ( IsNextLane4( ) )
    {
      exit_OnClosePedestrianLanes( );
      enter_OpenLane4( );
      runningState.Main = Main_States::E_OpenLane4;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
    else
    {
      exit_OnClosePedestrianLanes( );
      enter_OpenLane1( );
      runningState.Main = Main_States::E_OpenLane1;
      storedState.shallow_Operational = Main_States::E_Controlled;
      store_Shallow_Operational( storedState.shallow_Operational, instanceData );
    }
  }

  return NULL;
}

void ExecutionDirector::enter_StandBy( )
{
  runningState.Main = Main_States::E_StandBy;

  StopTraffic( instanceData );

  DisableSystem( instanceData );

  NotifyCrossroad( instanceData );
}

void ExecutionDirector::enter_SwitchSystem( )
{
  runningState.Main = Main_States::E_SwitchSystem;

  StartSystemSwitchingTimer( instanceData );

  NotifyCrossroad( instanceData );
}

void ExecutionDirector::enter_GoesToOperational( )
{
  runningState.Main = Main_States::E_GoesToOperational;

  doActionHandler = launchDoAction( callDoAction_GoesToOperational, this, nullptr, 0 );
}

void ExecutionDirector::enter_GoesToStandby( )
{
  runningState.Main = Main_States::E_GoesToStandby;

  doActionHandler = launchDoAction( callDoAction_GoesToStandby, this, nullptr, 0 );
}

void ExecutionDirector::enter_SwitchControlState( )
{
  runningState.Main = Main_States::E_SwitchControlState;

  StopTraffic( instanceData );

  doActionHandler = launchDoAction( callDoAction_SwitchControlState, this, nullptr, 0 );
}

void ExecutionDirector::enter_Uncontrolled( )
{
  runningState.Main = Main_States::E_Uncontrolled;

  StartUncontrolMode( instanceData );

  NotifyCrossroad( instanceData );
}

void ExecutionDirector::enter_CheckRequests( )
{
  runningState.Main = Main_States::E_CheckRequests;

  CheckRouteRequest( instanceData );

  Update( instanceData );

  doActionHandler = launchDoAction( callDoAction_CheckRequests, this, nullptr, 0 );
}

void ExecutionDirector::enter_Controlled( )
{
  runningState.Main = Main_States::E_Controlled;

  StartControlMode( instanceData );

  NotifyCrossroad( instanceData );
}

void ExecutionDirector::enter_OpenLane1( )
{
  runningState.Main = Main_States::E_OpenLane1;

  OrderOpenLane1( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OpenLane1, this, nullptr, 0 );
}

void ExecutionDirector::enter_OnCloseLane1( )
{
  runningState.Main = Main_States::E_OnCloseLane1;

  PrepareForNextLane( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OnCloseLane1, this, nullptr, 0 );
}

void ExecutionDirector::enter_OpenLane2( )
{
  runningState.Main = Main_States::E_OpenLane2;

  OrderOpenLane2( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OpenLane2, this, nullptr, 0 );
}

void ExecutionDirector::enter_OnCloseLane2( )
{
  runningState.Main = Main_States::E_OnCloseLane2;

  PrepareForNextLane( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OnCloseLane2, this, nullptr, 0 );
}

void ExecutionDirector::enter_OpenLane3( )
{
  runningState.Main = Main_States::E_OpenLane3;

  OrderOpenLane3( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OpenLane3, this, nullptr, 0 );
}

void ExecutionDirector::enter_OnCloseLane3( )
{
  runningState.Main = Main_States::E_OnCloseLane3;

  PrepareForNextLane( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OnCloseLane3, this, nullptr, 0 );
}

void ExecutionDirector::enter_OpenLane4( )
{
  runningState.Main = Main_States::E_OpenLane4;

  OrderOpenLane4( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OpenLane4, this, nullptr, 0 );
}

void ExecutionDirector::enter_OnCloseLane4( )
{
  runningState.Main = Main_States::E_OnCloseLane4;

  PrepareForNextLane( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OnCloseLane4, this, nullptr, 0 );
}

void ExecutionDirector::enter_OpenPedestrianLanes( )
{
  runningState.Main = Main_States::E_OpenPedestrianLanes;

  OrderOpenPedestrianLanes( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OpenPedestrianLanes, this, nullptr, 0 );
}

void ExecutionDirector::enter_OnClosePedestrianLanes( )
{
  runningState.Main = Main_States::E_OnClosePedestrianLanes;

  PrepareForNextLane( instanceData );

  NotifyCrossroad( instanceData );

  doActionHandler = launchDoAction( callDoAction_OnClosePedestrianLanes, this, nullptr, 0 );
}

void ExecutionDirector::exit_StandBy( )
{
  runningState.Main = Main_States::E_StandBy;

  EnableSystem( instanceData );
}

void ExecutionDirector::exit_GoesToOperational( )
{
  runningState.Main = Main_States::E_GoesToOperational;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_GoesToStandby( )
{
  runningState.Main = Main_States::E_GoesToStandby;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_SwitchControlState( )
{
  runningState.Main = Main_States::E_SwitchControlState;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_Operational( )
{
  runningState.Main = Main_States::E_Operational;

  StopTraffic( instanceData );
}

void ExecutionDirector::exit_CheckRequests( )
{
  runningState.Main = Main_States::E_CheckRequests;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OpenLane1( )
{
  runningState.Main = Main_States::E_OpenLane1;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OnCloseLane1( )
{
  runningState.Main = Main_States::E_OnCloseLane1;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OpenLane2( )
{
  runningState.Main = Main_States::E_OpenLane2;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OnCloseLane2( )
{
  runningState.Main = Main_States::E_OnCloseLane2;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OpenLane3( )
{
  runningState.Main = Main_States::E_OpenLane3;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OnCloseLane3( )
{
  runningState.Main = Main_States::E_OnCloseLane3;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OpenLane4( )
{
  runningState.Main = Main_States::E_OpenLane4;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OnCloseLane4( )
{
  runningState.Main = Main_States::E_OnCloseLane4;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OpenPedestrianLanes( )
{
  runningState.Main = Main_States::E_OpenPedestrianLanes;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void ExecutionDirector::exit_OnClosePedestrianLanes( )
{
  runningState.Main = Main_States::E_OnClosePedestrianLanes;
  if ( doActionHandler.has_value( )
    && pthread_equal( doActionHandler.value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler.value( ) );
    doActionHandler.reset( );
  }
}

void* ExecutionDirector::callDoAction_GoesToOperational( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_GoesToOperational( );

  return NULL;
}

void* ExecutionDirector::callDoAction_GoesToStandby( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_GoesToStandby( );

  return NULL;
}

void* ExecutionDirector::callDoAction_SwitchControlState( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_SwitchControlState( );

  return NULL;
}

void* ExecutionDirector::callDoAction_CheckRequests( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_CheckRequests( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OpenLane1( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OpenLane1( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OnCloseLane1( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OnCloseLane1( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OpenLane2( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OpenLane2( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OnCloseLane2( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OnCloseLane2( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OpenLane3( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OpenLane3( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OnCloseLane3( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OnCloseLane3( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OpenLane4( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OpenLane4( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OnCloseLane4( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OnCloseLane4( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OpenPedestrianLanes( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OpenPedestrianLanes( );

  return NULL;
}

void* ExecutionDirector::callDoAction_OnClosePedestrianLanes( void* arg )
{
  ExecutionDirector* obj = reinterpret_cast< ExecutionDirector* >( arg );
  obj->doAction_OnClosePedestrianLanes( );

  return NULL;
}

pthread_t ExecutionDirector::launchDoAction( void *(*threadStart)(void *), ExecutionDirector* pStateMachine, void *stackAddr, size_t stackSize )
{
  pthread_t thr = 0;

  if ( threadStart != NULL )
  {
    pthread_attr_t attr;

    int err = pthread_attr_init( &attr );
    if ( err == 0 )
    {
      err = pthread_attr_setdetachstate( &attr, PTHREAD_CREATE_DETACHED );

      if ( err == 0 )
      {
        err = pthread_attr_setinheritsched( &attr, PTHREAD_EXPLICIT_SCHED );
      }

      if ( ( err == 0 ) && ( stackAddr != nullptr ) && ( stackSize > 0 ) )
      {
        err = pthread_attr_setstack( &attr, stackAddr, stackSize );
        err = 0;
      }

      if ( err == 0 )
      {
        err = pthread_create( &thr, &attr, threadStart, pStateMachine);
      }

      if ( err != 0 )
      {
        thr = 0;
      }

      pthread_attr_destroy( &attr );
    }
  }

  return thr;
}

// End of ExecutionDirector.cpp
