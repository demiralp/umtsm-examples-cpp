/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-09 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <gmock/gmock.h>

#define private public
#define protected public

#include <ExecutionDirector.hh>

#undef private
#undef protected

namespace sm
{
  namespace test
  {
    class ExecutionDirector_Mock
      : public ExecutionDirector
    {
      public:
        // The mock of the guards
        MOCK_METHOD( bool, IsControlledModeRequested, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsUncontrolledModeRequested, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsNextLane2, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsNextLane3, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsNextLane4, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsNextLanePedestrianLanes, ( ), ( const, override ) );
        MOCK_METHOD( bool, IsNextLane1, ( ), ( const, override ) );

        // The mock of the actions
        MOCK_METHOD( void, StopTraffic, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, DisableSystem, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, NotifyCrossroad, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, EnableSystem, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, ClearControlMode, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetControlledMode, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetUncontrolledMode, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, StartSystemSwitchingTimer, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForSystemSwitchingTimer, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForTrafficStops, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, StartUncontrolMode, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, CheckRouteRequest, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, Update, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForInterval, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, StartControlMode, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, OrderOpenLane1, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForLane1, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, PrepareForNextLane, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForNextLaneOpen, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, OrderOpenLane2, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForLane2, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, OrderOpenLane3, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForLane3, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, OrderOpenLane4, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForLane4, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, OrderOpenPedestrianLanes, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, WaitForPedestrians, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetNextOpenLane1, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetNextOpenLane2, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetNextOpenLane3, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetNextOpenLane4, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetNextOpenLanePedestrianLanes, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetDisableLane1, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetDisableLane2, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetDisableLane3, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetDisableLane4, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetEnableLane1, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetEnableLane2, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetEnableLane3, ( ExecutionDirector_DataType const& input ), ( override ) );
        MOCK_METHOD( void, SetEnableLane4, ( ExecutionDirector_DataType const& input ), ( override ) );

        // The mock functions to load and store persistent histories
        MOCK_METHOD( void, store_Shallow_Operational, ( Main_States state, ExecutionDirector_DataType const& instance ), ( const, override ) );
        MOCK_METHOD( Main_States, load_Shallow_Operational, ( ExecutionDirector_DataType const& instance ), ( const, override ) );
    }; // End Of the class `ExecutionDirector_Mock`
  }  // End namespace test
}  // End namespace sm

// End of ExecutionDirector_Mock.hh

