/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-09 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include <ExecutionDirector_Helper.hh>

namespace
{
  using namespace ::std;
  using namespace ::testing;
  using namespace ::sm::test;
  using ::testing::_;
}  // namespace

namespace
{
  typedef struct StoredStateStatus
  {
    ExecutionDirector::Main_States shallow_Operational;
  } StoredStateStatus_t;

  using ExecutionDirector_InititalizationTest = TestFixture_ExecutionDirector< ExecutionDirector_Fixture, StoredStateStatus_t >;

  TEST_P( ExecutionDirector_InititalizationTest, DISABLED_Initialize )
  {
    auto const testcase = GetParam( );

    ON_CALL( GetMock( ), load_Shallow_Operational( _ ) )
      .WillByDefault( Return( testcase.shallow_Operational ) );

    ExecutionDirector_Mock sm;

    sm.initialize( );

    EXPECT_TRUE( sm.isReady( ) );
    EXPECT_FALSE( sm.isAlive( ) );
    EXPECT_FALSE( sm.isTerminated( ) );
    EXPECT_FALSE( sm.isIn_Main_State( ) );

    EXPECT_EQ( sm.storedState.shallow_Operational, testcase.shallow_Operational );
  }

  StoredStateStatus_t SampleDataValues[ ] =
  {
    { ExecutionDirector::Main_States::E_init },
    { ExecutionDirector::Main_States::E_Uncontrolled },
    { ExecutionDirector::Main_States::E_Controlled }
  };

  INSTANTIATE_TEST_SUITE_P( ExecutionDirector_InititalizationTestDataSet,
    ExecutionDirector_InititalizationTest, ValuesIn( SampleDataValues ) );
}  // namespace

// End of ExecutionDirector_InitTests.cpp
