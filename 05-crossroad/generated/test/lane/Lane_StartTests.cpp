/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-08-03 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Lane_Helper.hh"

namespace
{
  using namespace ::std;
  using namespace ::testing;
  using namespace ::sm::test;
  using ::testing::_;
}  // namespace

namespace
{
  typedef struct StoredStateStatus
  {
    Lane::Availability_States shallow_Availability;
  } StoredStateStatus_t;
}  // End of namespace

namespace
{
  using Start = TestFixture_Lane< Lane_Fixture, StoredStateStatus_t >;

  TEST_P( Start, Start_Successfully )
  {
    auto const testcase = GetParam( );

    EXPECT_CALL( *this, load_Shallow_Availability( _ ) )
      .WillOnce( Return( testcase.shallow_Availability ) );

    start( );

    EXPECT_FALSE( isReady( ) );
    EXPECT_TRUE( isAlive( ) );
    EXPECT_FALSE( isTerminated( ) );
    EXPECT_TRUE( isIn_Main_State( ) );

    EXPECT_EQ( testcase.shallow_Availability, storedState.shallow_Availability );
  }

  StoredStateStatus_t Initization_SampleDataValues[ ] =
  {
    { Lane::Availability_States::E_init },
    { Lane::Availability_States::E_Available },
    { Lane::Availability_States::E_Unavailable }
  };

  INSTANTIATE_TEST_SUITE_P( Lane_StartTest,
    Start, ValuesIn( Initization_SampleDataValues ) );
}  // End of namespace

// End of Lane_InitTests.cpp

