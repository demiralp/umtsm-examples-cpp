/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-29 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**********************************************/
/*               CASE 3                       */
/**********************************************/

type external TimePoint;

sm NumberGuess
{
    properties
    {
        unsigned int number;
        unsigned int guess;
        boolean scan_result;
        char answer;
        TimePoint game_begin;
        TimePoint estimation_begin;
        boolean warn;
    }

    entry / Salute;
    init -> PlayGame;

    state PlayGame
    {
        entry / SetANumber, StartEstimationTimer;
        init -> GetEstimation;

        clock1sec [IsGameTimeOver] -> AskNewDeal / PrintGameOver;

        state GetEstimation
        {
            entry / AskEstimation, StartAnswerTimer;
            do / ReadEstimation;

            clock1sec [IsAnsweringTimeUp] -> AskNewDeal / PrintTimeIsUp;
            clock1sec [IsTimeRunOut] / PrintHurryUp, AskEstimation;

            -> CheckReadings;
        }

        choice CheckReadings
        {
            [IsDraw] -> AskNewDeal / PrintShowNumber;
            [IsOnLeave] -> terminate / PrintGoodBye;
            [not IsANumberRead] -> GetEstimation / PrintNoNumberIsRead;
            [not IsNumberInRange] -> GetEstimation / PrintNumberIsNotInRange;
            [AreNumbersEqual] -> AskNewDeal / PrintConguratulation;

            -> GetEstimation / PrintHints;
        }
    }

    state AskNewDeal
    {
        entry / PrintAskNewDeal, StartAnswerTimer;
        do / ReadAnswerToContinue;

        clock1sec [IsAnsweringTimeUp] -> terminate / PrintGoodBye;

        -> CheckNewDeal;
    }

    choice CheckNewDeal
    {
        [IsAnswerYes] -> PlayGame / PrintVola;
        [IsAnswerNo || IsOnLeave] -> terminate / PrintGoodBye;

        -> AskNewDeal / PrintWarning;
    }

    abort -> terminate / PrintGoodBye;
    show / PrintShowNumber;
    newgame --> PlayGame / Salute;
}
