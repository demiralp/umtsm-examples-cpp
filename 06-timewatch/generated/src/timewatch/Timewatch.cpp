/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-31 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Timewatch.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>

Timewatch::Timewatch( )
{
  initialize( );
}

Timewatch::~Timewatch( )
{
  deinitialize( );
}

void Timewatch::initialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void Timewatch::deinitialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void Timewatch::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    std::lock_guard<std::mutex> lockGuard( guard );

    enter_Main( );
    init_Main( );
  }
}

void Timewatch::halt( )
{
  finalize_Main( );
}

bool Timewatch::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Timewatch::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool Timewatch::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Timewatch::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Timewatch::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Timewatch::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool Timewatch::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Main ) || 
      ( runningState.Main == Main_States::E_Run ) || 
      ( runningState.Main == Main_States::E_Idle ) || 
      ( runningState.Main == Main_States::E_Pause ) || 
      ( runningState.Main == Main_States::E_ReportTotalTime ) );

  return result;
}

bool Timewatch::isIn_Run_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Run ) || 
      ( runningState.Main == Main_States::E_Pause ) );

  return result;
}

bool Timewatch::isIn_Pause_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_Pause );

  return result;
}

bool Timewatch::isIn_Idle_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Idle ) || 
      ( runningState.Main == Main_States::E_ReportTotalTime ) );

  return result;
}

bool Timewatch::isIn_ReportTotalTime_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_ReportTotalTime );

  return result;
}

Timewatch_DataType* Timewatch::getData( ) noexcept
{
  Timewatch_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void Timewatch::trigger_abort( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_Run_State( ) )
    {
      if ( isIn_Pause_State( ) )
      {
        Exit( instanceData );

        terminate( );
      }
      else
      {
        Exit( instanceData );

        terminate( );
      }
    }
    else if ( isIn_Idle_State( ) )
    {
      if ( isIn_ReportTotalTime_State( ) )
      {
        Exit( instanceData );

        terminate( );
      }
      else
      {
        Exit( instanceData );

        terminate( );
      }
    }
    else
    {
      Exit( instanceData );

      terminate( );
    }
  }
}

void Timewatch::trigger_help( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Main_State( ) )
  {
    if ( isIn_Run_State( ) )
    {
      if ( isIn_Pause_State( ) )
      {
        PrintHelp( instanceData );
      }
      else
      {
        PrintHelp( instanceData );
      }
    }
    else if ( isIn_Idle_State( ) )
    {
      if ( isIn_ReportTotalTime_State( ) )
      {
        PrintHelp( instanceData );
      }
      else
      {
        PrintHelp( instanceData );
      }
    }
    else
    {
      PrintHelp( instanceData );
    }
  }
}

void Timewatch::trigger_pause( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Run_State( ) )
  {
    if ( isIn_Pause_State( ) )
    {
    }
    else
    {
      enter_Pause( );
      runningState.Main = Main_States::E_Pause;
    }
  }
}

void Timewatch::trigger_print( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Run_State( ) )
  {
    if ( isIn_Pause_State( ) )
    {
      PrintElapsedTime( instanceData );
    }
    else
    {
      PrintElapsedTime( instanceData );
    }
  }
}

void Timewatch::trigger_restart( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Run_State( ) )
  {
    if ( isIn_Pause_State( ) )
    {
      PrintStatusReset( instanceData );

      exit_Pause( );
      enter_Run( );
      runningState.Main = Main_States::E_Run;
    }
    else
    {
      PrintStatusReset( instanceData );

      enter_Run( );
      runningState.Main = Main_States::E_Run;
    }
  }
}

void Timewatch::trigger_resume( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Pause_State( ) )
  {
    PrintStatusResume( instanceData );

    exit_Pause( );
    runningState.Main = Main_States::E_Run;
  }
}

void Timewatch::trigger_start( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Idle_State( ) )
  {
    if ( isIn_ReportTotalTime_State( ) )
    {
      PrintStatusRun( instanceData );

      enter_Run( );
      runningState.Main = Main_States::E_Run;
    }
    else
    {
      PrintStatusRun( instanceData );

      enter_Run( );
      runningState.Main = Main_States::E_Run;
    }
  }
}

void Timewatch::trigger_stop( )
{
  [[maybe_unused]] bool doneMain = false;

  std::lock_guard<std::mutex> lockGuard( guard );

  if ( isIn_Run_State( ) )
  {
    if ( isIn_Pause_State( ) )
    {
      exit_Pause( );
      enter_Idle( );
      enter_ReportTotalTime( );
      runningState.Main = Main_States::E_ReportTotalTime;
    }
    else
    {
      enter_Idle( );
      enter_ReportTotalTime( );
      runningState.Main = Main_States::E_ReportTotalTime;
    }
  }
}

void Timewatch::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    runningState.Main = Main_States::E_final;
  }
}

void Timewatch::terminate( )
{
  finalize_Main( );
}

void Timewatch::init_Main( )
{
  enter_Idle( );
  runningState.Main = Main_States::E_Idle;
}

void Timewatch::enter_Main( )
{
  runningState.Main = Main_States::E_Main;

  PrintHelp( instanceData );
}

void Timewatch::enter_Run( )
{
  runningState.Main = Main_States::E_Run;

  InitWatchProperties( instanceData );
}

void Timewatch::enter_Pause( )
{
  runningState.Main = Main_States::E_Pause;

  InitPauseTime( instanceData );

  PrintStatusPause( instanceData );
}

void Timewatch::enter_Idle( )
{
  runningState.Main = Main_States::E_Idle;

  PrintStatusIdle( instanceData );
}

void Timewatch::enter_ReportTotalTime( )
{
  runningState.Main = Main_States::E_ReportTotalTime;

  ReportTotalTime( instanceData );
}

void Timewatch::exit_Pause( )
{
  runningState.Main = Main_States::E_Pause;

  UpdateSuspendentDuration( instanceData );
}

// End of Timewatch.cpp
