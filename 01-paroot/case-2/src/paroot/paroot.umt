/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-03-17 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

type external Complex;

enumeration Paroot_Solution
{
    UNDEFINED,
    MONO,
    REAL,
    COMPLEX
}

sm Paroot
{
    properties
    {
        float32 paramA;
        float32 paramB;
        float32 paramC;
        float32 delta;
        float32 root1;
        float32 root2;
        Complex croot1;
        Complex croot2;
        Paroot_Solution solutionType;
    }

    init -> Read;

    state Read
    {
        init -> ReadA;

        state ReadA
        {
            do / ReadParameterA;

            [isParamAZero] --> ReadA / WarningParamAIsZero;
            -> ReadB;
        }

        state ReadB
        {
            do / ReadParameterB;

            -> ReadC;
        }

        state ReadC
        {
            do / ReadParameterC;

            -> Solve;
        }
    }

    state Solve
    {
        do / FindTheRoots;

        -> Report;
    }

    state Report
    {
        init -> CheckSolutions;

        choice CheckSolutions
        {
            [isComplexSolution] -> ComplexSolution;
            [isSingleSolution] -> SingleSolution;
            -> Solutions;
        }

        state ComplexSolution
        {
            do / WriteComplexSolution;

            -> terminate;
        }

        state SingleSolution
        {
            do / WriteSingleSolution;

            -> terminate;
        }

        state Solutions
        {
            do / WriteSolutions;

            -> terminate;
        }
    }
}
