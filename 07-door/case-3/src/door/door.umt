/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-29 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

type external TimePoint;
type sm Engine;

sm Door
{
    properties
    {
        string id;
        optional Engine pEngine;
        TimePoint doorActionTimeStart;  // used by sensors to simulate closing or opening the door
        TimePoint waitUntil;
    }

    persistent deep history -> ManualMode:Open;

    state AutomaticMode
    {
        state Open
        {
            entry / resetWaitingTime;
            do / wait;

            ButtonPressed / resetWaitingTime;

            Manual -> ManualMode:Open;
            
            -> Closing;
        }

        state Closing
        {
            entry / engineRunACCW;

            ButtonPressed -> Opening / engineStop;
            DoorClosed -> Close / engineStop;
            Manual -> ManualMode:Closing;
        }

        state Close
        {
            ButtonPressed -> Opening;
            Manual -> ManualMode:Close;
        }

        state Opening
        {
            entry / engineRunCCW;

            DoorOpen -> Open / engineStop;
            Manual -> ManualMode:Opening;
        }
    }

    state ManualMode
    {
        state Open
        {
            ButtonPressed -> Closing;
            Automatic -> AutomaticMode:Open;
        }

        state Closing
        {
            entry / engineRunACCW;

            ButtonPressed -> Opening / engineStop;
            DoorClosed -> Close / engineStop;
            Automatic -> AutomaticMode:Closing;
        }

        state Close
        {
            ButtonPressed -> Opening;
            Automatic -> AutomaticMode:Close;
        }

        state Opening
        {
            entry / engineRunCCW;

            DoorOpen -> Open / engineStop;
            Automatic -> AutomaticMode:Opening;
        }
    }
}
