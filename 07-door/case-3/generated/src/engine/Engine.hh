/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-31 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <Engine_DataType.hh>

class Engine
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_Idle,
      E_Running,
      E_CCW,
      E_ACCW,
      E_final
    };

  private:
    struct
    {
      Main_States Main;
    } runningState;

  private:
    struct
    {
      Main_States deep_Main;
    } storedState;

  public:
    Engine_DataType instanceData;

  public:
    Engine( );
    virtual ~Engine( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_Idle_State( ) const noexcept;
    bool isIn_Running_State( ) const noexcept;
    bool isIn_CCW_State( ) const noexcept;
    bool isIn_ACCW_State( ) const noexcept;

    void trigger_runACCW( );
    void trigger_runCCW( );
    void trigger_stop( );

    Engine_DataType* getData( ) noexcept;

  private:
    void finalize_Main( );
    void terminate( );

    void storeEntireStates( );

    void enter_CCW( );
    void enter_ACCW( );

    void exit_CCW( );
    void exit_ACCW( );

    void init_Main( );

  // The interface of the actions
  protected:
    virtual void PowerOffLeftWire( Engine_DataType const& input );
    virtual void PowerOffRightWire( Engine_DataType const& input );
    virtual void PowerUpLeftWire( Engine_DataType const& input );
    virtual void PowerUpRightWire( Engine_DataType const& input );

  // The interface of the Persistency Functions
  protected:
    virtual void store_Deep_Main( Main_States state, Engine_DataType const& instance ) const;
    virtual Main_States load_Deep_Main( Engine_DataType const& instance ) const;

  // The interface of the thread support functions
  private:
  };

  // End of Engine.hh
