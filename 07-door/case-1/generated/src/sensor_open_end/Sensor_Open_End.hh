/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-31 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <mutex>
#include <optional>
#include <thread>

#include <Sensor_Open_End_DataType.hh>

class Sensor_Open_End
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_Idle,
      E_Check,
      E_final
    };

  private:
    std::mutex guard;

    struct
    {
      Main_States Main;
    } runningState;

  private:
    std::optional< pthread_t > doActionHandler;

  public:
    Sensor_Open_End_DataType instanceData;

  public:
    Sensor_Open_End( );
    virtual ~Sensor_Open_End( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_Idle_State( ) const noexcept;
    bool isIn_Check_State( ) const noexcept;

    Sensor_Open_End_DataType* getData( ) noexcept;

  private:
    void finalize_Main( );
    void terminate( );

    void* doAction_Idle( );
    void* doAction_Check( );

    void enter_Idle( );
    void enter_Check( );

    void exit_Idle( );
    void exit_Check( );

    void init_Main( );

  // The interface of the actions
  protected:
    virtual void checkDoorOpen( Sensor_Open_End_DataType const& input );
    virtual void notifyDoorOpen( Sensor_Open_End_DataType const& input );
    virtual void waitUntilDoorStartOpening( Sensor_Open_End_DataType const& input );

  // The interface of the thread support functions
  private:
    static void* callDoAction_Idle( void* arg );
    static void* callDoAction_Check( void* arg );

    static pthread_t launchDoAction( void *(*threadStart)(void *), Sensor_Open_End* pStateMachine, void *stackAddr, size_t stackSize );
  };

  // End of Sensor_Open_End.hh
