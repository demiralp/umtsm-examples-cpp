/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-05-31 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Engine.hh"

#include <cassert>
#include <cstddef>
#include <cstring>

Engine::Engine( )
{
  initialize( );
}

Engine::~Engine( )
{
  deinitialize( );
}

void Engine::initialize( )
{
  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void Engine::deinitialize( )
{
  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void Engine::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    storedState.deep_Main = load_Deep_Main( instanceData );

    init_Main( );
  }
}

void Engine::halt( )
{
  finalize_Main( );
}

bool Engine::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Engine::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool Engine::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Engine::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool Engine::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool Engine::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool Engine::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Main ) || 
      ( runningState.Main == Main_States::E_Idle ) || 
      ( runningState.Main == Main_States::E_Running ) || 
      ( runningState.Main == Main_States::E_CCW ) || 
      ( runningState.Main == Main_States::E_ACCW ) );

  return result;
}

bool Engine::isIn_Idle_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_Idle );

  return result;
}

bool Engine::isIn_Running_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( ( runningState.Main == Main_States::E_Running ) || 
      ( runningState.Main == Main_States::E_CCW ) || 
      ( runningState.Main == Main_States::E_ACCW ) );

  return result;
}

bool Engine::isIn_CCW_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_CCW );

  return result;
}

bool Engine::isIn_ACCW_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_ACCW );

  return result;
}

Engine_DataType* Engine::getData( ) noexcept
{
  Engine_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void Engine::trigger_runACCW( )
{
  [[maybe_unused]] bool doneMain = false;

  if ( isIn_Idle_State( ) )
  {
    enter_ACCW( );
    runningState.Main = Main_States::E_ACCW;
    storedState.deep_Main = Main_States::E_ACCW;
    store_Deep_Main( storedState.deep_Main, instanceData );
  }
}

void Engine::trigger_runCCW( )
{
  [[maybe_unused]] bool doneMain = false;

  if ( isIn_Idle_State( ) )
  {
    enter_CCW( );
    runningState.Main = Main_States::E_CCW;
    storedState.deep_Main = Main_States::E_CCW;
    store_Deep_Main( storedState.deep_Main, instanceData );
  }
}

void Engine::trigger_stop( )
{
  [[maybe_unused]] bool doneMain = false;

  if ( isIn_Running_State( ) )
  {
    if ( isIn_CCW_State( ) )
    {
      exit_CCW( );
      runningState.Main = Main_States::E_Idle;
      storedState.deep_Main = Main_States::E_Idle;
      store_Deep_Main( storedState.deep_Main, instanceData );
    }
    else if ( isIn_ACCW_State( ) )
    {
      exit_ACCW( );
      runningState.Main = Main_States::E_Idle;
      storedState.deep_Main = Main_States::E_Idle;
      store_Deep_Main( storedState.deep_Main, instanceData );
    }
    else
    {
      runningState.Main = Main_States::E_Idle;
      storedState.deep_Main = Main_States::E_Idle;
      store_Deep_Main( storedState.deep_Main, instanceData );
    }
  }
}

void Engine::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    runningState.Main = Main_States::E_final;
  }
}

void Engine::terminate( )
{
  storeEntireStates( );
  finalize_Main( );
}

void Engine::storeEntireStates( )
{
  store_Deep_Main( storedState.deep_Main, instanceData );
}

void Engine::init_Main( )
{
  // started by history stored
  switch ( storedState.deep_Main )
  {
    case Main_States::E_Idle:
    {
      runningState.Main = Main_States::E_Idle;
      break;
    }
    case Main_States::E_Running:
    {
      runningState.Main = Main_States::E_Running;
      break;
    }
    case Main_States::E_CCW:
    {
      enter_CCW( );
      runningState.Main = Main_States::E_CCW;
      break;
    }
    case Main_States::E_ACCW:
    {
      enter_ACCW( );
      runningState.Main = Main_States::E_ACCW;
      break;
    }
    default:
    {
      runningState.Main = Main_States::E_Idle;
      storedState.deep_Main = Main_States::E_Idle;
      store_Deep_Main( storedState.deep_Main, instanceData );
      break;
    }
  }
}

void Engine::enter_CCW( )
{
  runningState.Main = Main_States::E_CCW;

  PowerUpLeftWire( instanceData );
}

void Engine::enter_ACCW( )
{
  runningState.Main = Main_States::E_ACCW;

  PowerUpRightWire( instanceData );
}

void Engine::exit_CCW( )
{
  runningState.Main = Main_States::E_CCW;

  PowerOffLeftWire( instanceData );
}

void Engine::exit_ACCW( )
{
  runningState.Main = Main_States::E_ACCW;

  PowerOffRightWire( instanceData );
}

// End of Engine.cpp
