/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <mutex>
#include <optional>
#include <thread>

#include <Calculator_DataType.hh>

#include <Display.hh>
#include <Keypad.hh>

class Calculator
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_final
    };

  private:
    enum class Input_States
    {
      E_init,
      E_CalculatorKeypad,
      E_final
    };

  private:
    enum class ProcessingUnit_States
    {
      E_init,
      E_Process,
      E_EnterBaseDigits,
      E_EnterFractions,
      E_EnterExponents,
      E_Error,
      E_Faulty,
      E_DivisionByZero,
      E_Overflow,
      E_final
    };

  private:
    enum class Output_States
    {
      E_init,
      E_CalculatorDisplay,
      E_final
    };

  public:
    enum class SubstateMachines
    {
      E_Self,
      E_SubSM_CalculatorKeypad,
      E_SubSM_CalculatorDisplay
    };

  private:
    std::mutex guard;

    struct
    {
      Main_States Main;
      Input_States Input;
      ProcessingUnit_States ProcessingUnit;
      Output_States Output;
    } runningState;

  private:
    std::optional< pthread_t > doActionHandler;

  private:
    struct
    {
      Keypad CalculatorKeypad;
      Display CalculatorDisplay;
    } subSM;

  public:
    Calculator_DataType instanceData;

  public:
    Calculator( );
    virtual ~Calculator( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;
    bool is_Input_Region_Ready( ) const noexcept;
    bool is_ProcessingUnit_Region_Ready( ) const noexcept;
    bool is_Output_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;
    bool is_Input_Region_Terminated( ) const noexcept;
    bool is_ProcessingUnit_Region_Terminated( ) const noexcept;
    bool is_Output_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;
    bool isIn_Input_Region( ) const noexcept;
    bool isIn_ProcessingUnit_Region( ) const noexcept;
    bool isIn_Output_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_CalculatorKeypad_State( ) const noexcept;
    bool isIn_Process_State( ) const noexcept;
    bool isIn_EnterBaseDigits_State( ) const noexcept;
    bool isIn_EnterFractions_State( ) const noexcept;
    bool isIn_EnterExponents_State( ) const noexcept;
    bool isIn_Error_State( ) const noexcept;
    bool isIn_Faulty_State( ) const noexcept;
    bool isIn_DivisionByZero_State( ) const noexcept;
    bool isIn_Overflow_State( ) const noexcept;
    bool isIn_CalculatorDisplay_State( ) const noexcept;

    void trigger_Backspace( );
    void trigger_ChangeSign( );
    void trigger_Clear( );
    void trigger_Digit( );
    void trigger_Division( );
    void trigger_DivisionByZero( );
    void trigger_Dot( );
    void trigger_Enter( );
    void trigger_Exponents( );
    void trigger_Faulty( );
    void trigger_Minus( );
    void trigger_Multiplay( );
    void trigger_Notify( );
    void trigger_Overflow( );
    void trigger_Plus( );
    void trigger_Reset( );
    void trigger_SwitchOff( );
    void trigger_Update( );

    Calculator_DataType* getData( ) noexcept;

    Keypad_DataType* getSMData_CalculatorKeypad( ) noexcept;
    Display_DataType* getSMData_CalculatorDisplay( ) noexcept;

    Keypad* getSubSM_CalculatorKeypad( ) noexcept;
    Display* getSubSM_CalculatorDisplay( ) noexcept;

    void subSMTrigger_Backspace( SubstateMachines subsm );
    void subSMTrigger_ChangeSign( SubstateMachines subsm );
    void subSMTrigger_Clear( SubstateMachines subsm );
    void subSMTrigger_Digit( SubstateMachines subsm );
    void subSMTrigger_Division( SubstateMachines subsm );
    void subSMTrigger_DivisionByZero( SubstateMachines subsm );
    void subSMTrigger_Dot( SubstateMachines subsm );
    void subSMTrigger_Enter( SubstateMachines subsm );
    void subSMTrigger_Exponents( SubstateMachines subsm );
    void subSMTrigger_Faulty( SubstateMachines subsm );
    void subSMTrigger_Minus( SubstateMachines subsm );
    void subSMTrigger_Multiplay( SubstateMachines subsm );
    void subSMTrigger_Notify( SubstateMachines subsm );
    void subSMTrigger_Overflow( SubstateMachines subsm );
    void subSMTrigger_Plus( SubstateMachines subsm );
    void subSMTrigger_Reset( SubstateMachines subsm );
    void subSMTrigger_SwitchOff( SubstateMachines subsm );
    void subSMTrigger_Update( SubstateMachines subsm );

  private:
    void finalize_Main( );
    void finalize_Input( );
    void finalize_ProcessingUnit( );
    void finalize_Output( );

    void terminate( );

    void* doAction_Process( );

    void enter_Process( );
    void enter_EnterBaseDigits( );
    void enter_EnterFractions( );
    void enter_EnterExponents( );
    void enter_Faulty( );
    void enter_DivisionByZero( );
    void enter_Overflow( );

    void exit_CalculatorKeypad( );
    void exit_Process( );
    void exit_Error( );
    void exit_CalculatorDisplay( );

    void init_Main( );
    void init_CalculatorKeypad( );
    void init_Process( );
    void init_CalculatorDisplay( );

  // The interface of the guards
  public:
    virtual bool HasDivisionByZeroError( ) const;
    virtual bool HasOverflowError( ) const;
    virtual bool IsBaseZero( ) const;
    virtual bool IsExponentZero( ) const;
    virtual bool IsFaulty( ) const;
    virtual bool IsFractionZero( ) const;
    virtual bool IsThereSpaceForExponent( ) const;

  // The interface of the actions
  protected:
    virtual void Additions( Calculator_DataType const& input );
    virtual void Calculate( Calculator_DataType const& input );
    virtual void ChangeBaseSign( Calculator_DataType const& input );
    virtual void ChangeExponetSign( Calculator_DataType const& input );
    virtual void CheckErrorStatus( Calculator_DataType const& input );
    virtual void ClearExponent( Calculator_DataType const& input );
    virtual void ClearFraction( Calculator_DataType const& input );
    virtual void ClearLastEntry( Calculator_DataType const& input );
    virtual void Divides( Calculator_DataType const& input );
    virtual void DrawSpliteLine( Calculator_DataType const& input );
    virtual void EraseBaseDigit( Calculator_DataType const& input );
    virtual void EraseExponentDigit( Calculator_DataType const& input );
    virtual void EraseFractionDigit( Calculator_DataType const& input );
    virtual void Multiplications( Calculator_DataType const& input );
    virtual void NotifyDisplayUpdate( Calculator_DataType const& input );
    virtual void NotifyDivisionByZeroError( Calculator_DataType const& input );
    virtual void NotifyFaultError( Calculator_DataType const& input );
    virtual void NotifyOverflowError( Calculator_DataType const& input );
    virtual void NotifyReset( Calculator_DataType const& input );
    virtual void PushBaseDigit( Calculator_DataType const& input );
    virtual void PushExponentDigit( Calculator_DataType const& input );
    virtual void PushFractionDigit( Calculator_DataType const& input );
    virtual void RemoveZerosFromFraction( Calculator_DataType const& input );
    virtual void ResetAccumulations( Calculator_DataType const& input );
    virtual void SetExponentEntry( Calculator_DataType const& input );
    virtual void SetFractionEntry( Calculator_DataType const& input );
    virtual void Substractions( Calculator_DataType const& input );

  // The interface of the thread support functions
  private:
    static void* callDoAction_Process( void* arg );

    static pthread_t launchDoAction( void *(*threadStart)(void *), Calculator* pStateMachine, void *stackAddr, size_t stackSize );
  };

  // End of Calculator.hh
