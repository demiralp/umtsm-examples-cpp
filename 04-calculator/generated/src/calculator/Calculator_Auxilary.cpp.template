/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-08 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Calculator.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>
#include <unistd.h>

// The implementation of the guards
bool Calculator::HasDivisionByZeroError( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: HasDivisionByZeroError

bool Calculator::HasOverflowError( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: HasOverflowError

bool Calculator::IsBaseZero( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsBaseZero

bool Calculator::IsExponentZero( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsExponentZero

bool Calculator::IsFaulty( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsFaulty

bool Calculator::IsFractionZero( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsFractionZero

bool Calculator::IsThereSpaceForExponent( ) const
{
  bool const result = false;
  return result;
}  // End of guard function: IsThereSpaceForExponent

// The implementation of the actions
void Calculator::Additions( Calculator_DataType const& input )
{
}  // End of action function: Additions

void Calculator::Calculate( Calculator_DataType const& input )
{
}  // End of action function: Calculate

void Calculator::ChangeBaseSign( Calculator_DataType const& input )
{
}  // End of action function: ChangeBaseSign

void Calculator::ChangeExponetSign( Calculator_DataType const& input )
{
}  // End of action function: ChangeExponetSign

void Calculator::CheckErrorStatus( Calculator_DataType const& input )
{
}  // End of action function: CheckErrorStatus

void Calculator::ClearExponent( Calculator_DataType const& input )
{
}  // End of action function: ClearExponent

void Calculator::ClearFraction( Calculator_DataType const& input )
{
}  // End of action function: ClearFraction

void Calculator::ClearLastEntry( Calculator_DataType const& input )
{
}  // End of action function: ClearLastEntry

void Calculator::Divides( Calculator_DataType const& input )
{
}  // End of action function: Divides

void Calculator::DrawSpliteLine( Calculator_DataType const& input )
{
}  // End of action function: DrawSpliteLine

void Calculator::EraseBaseDigit( Calculator_DataType const& input )
{
}  // End of action function: EraseBaseDigit

void Calculator::EraseExponentDigit( Calculator_DataType const& input )
{
}  // End of action function: EraseExponentDigit

void Calculator::EraseFractionDigit( Calculator_DataType const& input )
{
}  // End of action function: EraseFractionDigit

void Calculator::Multiplications( Calculator_DataType const& input )
{
}  // End of action function: Multiplications

void Calculator::NotifyDisplayUpdate( Calculator_DataType const& input )
{
}  // End of action function: NotifyDisplayUpdate

void Calculator::NotifyDivisionByZeroError( Calculator_DataType const& input )
{
}  // End of action function: NotifyDivisionByZeroError

void Calculator::NotifyFaultError( Calculator_DataType const& input )
{
}  // End of action function: NotifyFaultError

void Calculator::NotifyOverflowError( Calculator_DataType const& input )
{
}  // End of action function: NotifyOverflowError

void Calculator::NotifyReset( Calculator_DataType const& input )
{
}  // End of action function: NotifyReset

void Calculator::PushBaseDigit( Calculator_DataType const& input )
{
}  // End of action function: PushBaseDigit

void Calculator::PushExponentDigit( Calculator_DataType const& input )
{
}  // End of action function: PushExponentDigit

void Calculator::PushFractionDigit( Calculator_DataType const& input )
{
}  // End of action function: PushFractionDigit

void Calculator::RemoveZerosFromFraction( Calculator_DataType const& input )
{
}  // End of action function: RemoveZerosFromFraction

void Calculator::ResetAccumulations( Calculator_DataType const& input )
{
}  // End of action function: ResetAccumulations

void Calculator::SetExponentEntry( Calculator_DataType const& input )
{
}  // End of action function: SetExponentEntry

void Calculator::SetFractionEntry( Calculator_DataType const& input )
{
}  // End of action function: SetFractionEntry

void Calculator::Substractions( Calculator_DataType const& input )
{
}  // End of action function: Substractions

// End of Calculator_Auxilary.cpp
