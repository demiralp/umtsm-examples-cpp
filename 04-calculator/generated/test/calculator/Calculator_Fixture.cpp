/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-08-03 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "Calculator_Fixture.hh"

namespace sm
{
  namespace test
  {
    void Calculator_Fixture::SetUp()
    {
      /// \attention Initialize properties
      // instanceData.Accumulator = 
      // instanceData.Operator = 
      // instanceData.ErrorNo = 

      /// \attention Initialize `subSM.CalculatorKeypad.` which is instantiated from the state machine `Keypad`
      // subSM.CalculatorKeypad.instanceData.LastInputKey = 
      subSM.CalculatorKeypad.instanceData.pCalculator = new Calculator_Mock;

      /// \attention Initialize `subSM.CalculatorKeypad.instanceData.pCalculator` which is instantiated from the state machine `Calculator`
      // subSM.CalculatorKeypad.instanceData.pCalculatorinstanceData.Accumulator = 
      // subSM.CalculatorKeypad.instanceData.pCalculatorinstanceData.Operator = 
      // subSM.CalculatorKeypad.instanceData.pCalculatorinstanceData.ErrorNo = 

      /// \attention Initialize `subSM.CalculatorDisplay.` which is instantiated from the state machine `Display`
      // subSM.CalculatorDisplay.instanceData.BaseDigits = 
      // subSM.CalculatorDisplay.instanceData.FractionalDigits = 
      // subSM.CalculatorDisplay.instanceData.ExponentialDigits = 
      // subSM.CalculatorDisplay.instanceData.BaseSignaturePositive = 
      // subSM.CalculatorDisplay.instanceData.ExponentialSignaturePositive = 
      // subSM.CalculatorDisplay.instanceData.FractionalStart = 
      // subSM.CalculatorDisplay.instanceData.ExponentStart = 
    }

    void Calculator_Fixture::TearDown()
    {
      /// \attention Deinitialize `subSM.CalculatorKeypad` which is instantiated from the state machine `Keypad`
      delete subSM.CalculatorKeypad.instanceData.pCalculator;
      subSM.CalculatorKeypad.instanceData.pCalculator =  nullptr;
      // pCalculator
    }
  }  // End namespace test
}  // End namespace sm
// End of Calculator_Fixture.cpp

