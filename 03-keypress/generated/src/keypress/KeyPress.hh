/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-12 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#pragma once

#include <cstdint>

#include <KeyPress_DataType.hh>

class KeyPress
{
  private:
    enum class Main_States
    {
      E_init,
      E_Main,
      E_WaitABit,
      E_JoinSyncronize,
      E_final
    };

  private:
    enum class Alpha_States
    {
      E_init,
      E_ReadLetters,
      E_Pause,
      E_final
    };

  private:
    enum class Numeric_States
    {
      E_init,
      E_ReadDigits,
      E_final
    };

  private:
    enum class Log_States
    {
      E_init,
      E_PrintLog,
      E_final
    };

  private:
    struct
    {
      Main_States Main;
      Alpha_States Alpha;
      Numeric_States Numeric;
      Log_States Log;
    } runningState;

  public:
    KeyPress_DataType instanceData;

  public:
    KeyPress( );
    virtual ~KeyPress( );

    void initialize( );
    void deinitialize( );

    void start( );
    void halt( );

    bool isReady( ) const noexcept;
    bool isAlive( ) const noexcept;
    bool isTerminated( ) const noexcept;

    bool is_Main_Region_Ready( ) const noexcept;
    bool is_Alpha_Region_Ready( ) const noexcept;
    bool is_Numeric_Region_Ready( ) const noexcept;
    bool is_Log_Region_Ready( ) const noexcept;

    bool is_Main_Region_Terminated( ) const noexcept;
    bool is_Alpha_Region_Terminated( ) const noexcept;
    bool is_Numeric_Region_Terminated( ) const noexcept;
    bool is_Log_Region_Terminated( ) const noexcept;

    bool isIn_Main_Region( ) const noexcept;
    bool isIn_Alpha_Region( ) const noexcept;
    bool isIn_Numeric_Region( ) const noexcept;
    bool isIn_Log_Region( ) const noexcept;

    bool isIn_Main_State( ) const noexcept;
    bool isIn_ReadLetters_State( ) const noexcept;
    bool isIn_Pause_State( ) const noexcept;
    bool isIn_ReadDigits_State( ) const noexcept;
    bool isIn_PrintLog_State( ) const noexcept;
    bool isIn_WaitABit_State( ) const noexcept;

    void trigger_clock4log( );
    void trigger_key1( );
    void trigger_key2( );
    void trigger_key3( );
    void trigger_key4( );
    void trigger_key5( );
    void trigger_key6( );
    void trigger_key7( );
    void trigger_key8( );
    void trigger_key9( );
    void trigger_keyA( );
    void trigger_keyB( );
    void trigger_keyBackspace( );
    void trigger_keyC( );
    void trigger_keyDelete( );
    void trigger_keyF1( );
    void trigger_keyF12( );
    void trigger_keyF2( );
    void trigger_space( );

    KeyPress_DataType* getData( ) noexcept;

  private:
    void finalize_Main( );
    void finalize_Alpha( );
    void finalize_Numeric( );
    void finalize_Log( );

    void terminate( );

    void enter_Main( );
    void enter_WaitABit( );
    void enter_PrintLog( );

    void init_Main( );
    void init_Log( );

    void checkAndRun_JoinSyncronize( );

  // The interface of the guards
  public:
    virtual bool IsCountingFinished( ) const;

  // The interface of the actions
  protected:
    virtual void Count1( KeyPress_DataType const& input );
    virtual void Count2( KeyPress_DataType const& input );
    virtual void Count3( KeyPress_DataType const& input );
    virtual void Count4( KeyPress_DataType const& input );
    virtual void Count5( KeyPress_DataType const& input );
    virtual void Count6( KeyPress_DataType const& input );
    virtual void Count7( KeyPress_DataType const& input );
    virtual void Count8( KeyPress_DataType const& input );
    virtual void Count9( KeyPress_DataType const& input );
    virtual void CountA( KeyPress_DataType const& input );
    virtual void CountB( KeyPress_DataType const& input );
    virtual void CountC( KeyPress_DataType const& input );
    virtual void CountEven( KeyPress_DataType const& input );
    virtual void CountOdd( KeyPress_DataType const& input );
    virtual void LogCounters( KeyPress_DataType const& input );
    virtual void LogHeaders( KeyPress_DataType const& input );
    virtual void MessageGoodBye( KeyPress_DataType const& input );
    virtual void MessageHello( KeyPress_DataType const& input );
    virtual void MessagePressSpaceToExit( KeyPress_DataType const& input );
    virtual void ResetLetterCounters( KeyPress_DataType const& input );
    virtual void ResetNumericCounters( KeyPress_DataType const& input );

  // The interface of the thread support functions
  private:
  };

  // End of KeyPress.hh
