/*  ==============================================================================
 *  Created by Fehmi Demiralp(Fedem) on 2025-06-16 GMT
 *  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  This file is generated by UMTSM using the code generator `CppGen`
 *
 *  !!! It is highly recommended that DO NOT EDIT THIS GENERATED FILE !!!
 *
 *  Released under the MIT License
 *  ==============================================================================
 */

/*  Copyright (C) 2023-2025 Fedem (Fehmi Demiralp) <f.demiralp@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

#include "KeyPressEventGenerator.hh"

#include <cassert>
#include <csignal>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include <optional>
#include <thread>
#include <unistd.h>

namespace
{
  constexpr std::size_t doActionIndex_KeyEvent = 0U;
  constexpr std::size_t doActionIndex_TimeCounter = 1U;
}

KeyPressEventGenerator::KeyPressEventGenerator( )
{
  initialize( );
}

KeyPressEventGenerator::~KeyPressEventGenerator( )
{
  deinitialize( );
}

void KeyPressEventGenerator::initialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  instanceData.initialize( );
  runningState.Main = Main_States::E_init;
}

void KeyPressEventGenerator::deinitialize( )
{
  std::lock_guard<std::mutex> lockGuard( guard );;

  terminate( );
  runningState.Main = Main_States::E_final;

  instanceData.deinitialize( );
}

void KeyPressEventGenerator::start( )
{
  if ( ! isIn_Main_Region( ) )
  {
    std::lock_guard<std::mutex> lockGuard( guard );

    init_Main( );

    runningState.Main = Main_States::E_Main;
  }
}

void KeyPressEventGenerator::halt( )
{
  finalize_Main( );
}

bool KeyPressEventGenerator::isReady( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool KeyPressEventGenerator::isAlive( ) const noexcept
{
  auto const alive = isIn_Main_Region( );
  return alive;
}

bool KeyPressEventGenerator::isTerminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool KeyPressEventGenerator::is_Main_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.Main == Main_States::E_init );
  return ready;
}

bool KeyPressEventGenerator::is_KeyBaseEvent_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.KeyBaseEvent == KeyBaseEvent_States::E_init );
  return ready;
}

bool KeyPressEventGenerator::is_TimeBaseEvent_Region_Ready( ) const noexcept
{
  auto const ready = ( runningState.TimeBaseEvent == TimeBaseEvent_States::E_init );
  return ready;
}

bool KeyPressEventGenerator::is_Main_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.Main == Main_States::E_final );
  return terminated;
}

bool KeyPressEventGenerator::is_KeyBaseEvent_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.KeyBaseEvent == KeyBaseEvent_States::E_final );
  return terminated;
}

bool KeyPressEventGenerator::is_TimeBaseEvent_Region_Terminated( ) const noexcept
{
  auto const terminated = ( runningState.TimeBaseEvent == TimeBaseEvent_States::E_final );
  return terminated;
}

bool KeyPressEventGenerator::isIn_Main_Region( ) const noexcept
{
  bool const result = ( runningState.Main != Main_States::E_init ) &&
                      ( runningState.Main != Main_States::E_final );

  return result;
}

bool KeyPressEventGenerator::isIn_KeyBaseEvent_Region( ) const noexcept
{
  bool const result = ( runningState.KeyBaseEvent != KeyBaseEvent_States::E_init ) &&
                      ( runningState.KeyBaseEvent != KeyBaseEvent_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool KeyPressEventGenerator::isIn_TimeBaseEvent_Region( ) const noexcept
{
  bool const result = ( runningState.TimeBaseEvent != TimeBaseEvent_States::E_init ) &&
                      ( runningState.TimeBaseEvent != TimeBaseEvent_States::E_final ) &&
                      isIn_Main_State( );

  return result;
}

bool KeyPressEventGenerator::isIn_Main_State( ) const noexcept
{
  bool const result = isIn_Main_Region( ) &&
    ( runningState.Main == Main_States::E_Main );

  return result;
}

bool KeyPressEventGenerator::isIn_KeyEvent_State( ) const noexcept
{
  bool const result = isIn_KeyBaseEvent_Region( ) &&
    ( runningState.KeyBaseEvent == KeyBaseEvent_States::E_KeyEvent );

  return result;
}

bool KeyPressEventGenerator::isIn_TimeCounter_State( ) const noexcept
{
  bool const result = isIn_TimeBaseEvent_Region( ) &&
    ( runningState.TimeBaseEvent == TimeBaseEvent_States::E_TimeCounter );

  return result;
}

KeyPressEventGenerator_DataType* KeyPressEventGenerator::getData( ) noexcept
{
  KeyPressEventGenerator_DataType* const pCustomData = &instanceData;
  return pCustomData;
}

void KeyPressEventGenerator::finalize_Main( )
{
  if ( isIn_Main_Region( ) )
  {
    runningState.Main = Main_States::E_final;
  }
}

void KeyPressEventGenerator::finalize_KeyBaseEvent( )
{
  if ( isIn_KeyBaseEvent_Region( ) )
  {
    if ( isIn_KeyEvent_State( ) )
    {
      if ( doActionHandler[ doActionIndex_KeyEvent ].has_value( )
        && ! pthread_equal( doActionHandler[ doActionIndex_KeyEvent ].value( ), pthread_self( ) ) )
      {
        pthread_cancel( doActionHandler[ doActionIndex_KeyEvent ].value( ) );
        doActionHandler[ doActionIndex_KeyEvent ].reset( );
      }
    }
    runningState.KeyBaseEvent = KeyBaseEvent_States::E_final;
  }
}

void KeyPressEventGenerator::finalize_TimeBaseEvent( )
{
  if ( isIn_TimeBaseEvent_Region( ) )
  {
    if ( isIn_TimeCounter_State( ) )
    {
      if ( doActionHandler[ doActionIndex_TimeCounter ].has_value( )
        && ! pthread_equal( doActionHandler[ doActionIndex_TimeCounter ].value( ), pthread_self( ) ) )
      {
        pthread_cancel( doActionHandler[ doActionIndex_TimeCounter ].value( ) );
        doActionHandler[ doActionIndex_TimeCounter ].reset( );
      }
    }
    runningState.TimeBaseEvent = TimeBaseEvent_States::E_final;
  }
}

void KeyPressEventGenerator::terminate( )
{
  finalize_Main( );
}

void KeyPressEventGenerator::init_Main( )
{
  init_KeyBaseEvent( );
  init_TimeBaseEvent( );
}

void KeyPressEventGenerator::init_KeyBaseEvent( )
{
  enter_KeyEvent( );
  runningState.KeyBaseEvent = KeyBaseEvent_States::E_KeyEvent;
}

void KeyPressEventGenerator::init_TimeBaseEvent( )
{
  enter_TimeCounter( );
  runningState.TimeBaseEvent = TimeBaseEvent_States::E_TimeCounter;
}

void* KeyPressEventGenerator::doAction_KeyEvent( )
{
  ReadKey( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_KeyEvent ].reset( );

  if ( isIn_KeyEvent_State( ) )
  {
    exit_KeyEvent( );
    enter_KeyEvent( );
    runningState.KeyBaseEvent = KeyBaseEvent_States::E_KeyEvent;
  }

  return NULL;
}

void* KeyPressEventGenerator::doAction_TimeCounter( )
{
  TimeBaseEventGenerator( instanceData );

  std::lock_guard<std::mutex> lockGuard( guard );

  doActionHandler[ doActionIndex_TimeCounter ].reset( );

  if ( isIn_TimeCounter_State( ) )
  {
    exit_TimeCounter( );
    enter_TimeCounter( );
    runningState.TimeBaseEvent = TimeBaseEvent_States::E_TimeCounter;
  }

  return NULL;
}

void KeyPressEventGenerator::enter_KeyEvent( )
{
  runningState.KeyBaseEvent = KeyBaseEvent_States::E_KeyEvent;

  doActionHandler[ doActionIndex_KeyEvent ] = launchDoAction( callDoAction_KeyEvent, this, nullptr, 0 );
}

void KeyPressEventGenerator::enter_TimeCounter( )
{
  runningState.TimeBaseEvent = TimeBaseEvent_States::E_TimeCounter;

  doActionHandler[ doActionIndex_TimeCounter ] = launchDoAction( callDoAction_TimeCounter, this, nullptr, 0 );
}

void KeyPressEventGenerator::exit_KeyEvent( )
{
  runningState.KeyBaseEvent = KeyBaseEvent_States::E_KeyEvent;
  if ( doActionHandler[ doActionIndex_KeyEvent ].has_value( )
    && ! pthread_equal( doActionHandler[ doActionIndex_KeyEvent ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_KeyEvent ].value( ) );
    doActionHandler[ doActionIndex_KeyEvent ].reset( );
  }
}

void KeyPressEventGenerator::exit_TimeCounter( )
{
  runningState.TimeBaseEvent = TimeBaseEvent_States::E_TimeCounter;
  if ( doActionHandler[ doActionIndex_TimeCounter ].has_value( )
    && ! pthread_equal( doActionHandler[ doActionIndex_TimeCounter ].value( ), pthread_self( ) ) )
  {
    pthread_cancel( doActionHandler[ doActionIndex_TimeCounter ].value( ) );
    doActionHandler[ doActionIndex_TimeCounter ].reset( );
  }
}

void* KeyPressEventGenerator::callDoAction_KeyEvent( void* arg )
{
  KeyPressEventGenerator* obj = reinterpret_cast< KeyPressEventGenerator* >( arg );
  obj->doAction_KeyEvent( );

  return NULL;
}

void* KeyPressEventGenerator::callDoAction_TimeCounter( void* arg )
{
  KeyPressEventGenerator* obj = reinterpret_cast< KeyPressEventGenerator* >( arg );
  obj->doAction_TimeCounter( );

  return NULL;
}

pthread_t KeyPressEventGenerator::launchDoAction( void *(*threadStart)(void *), KeyPressEventGenerator* pStateMachine, void *stackAddr, size_t stackSize )
{
  pthread_t thr = 0;

  if ( threadStart != NULL )
  {
    pthread_attr_t attr;

    int err = pthread_attr_init( &attr );
    if ( err == 0 )
    {
      err = pthread_attr_setdetachstate( &attr, PTHREAD_CREATE_DETACHED );

      if ( err == 0 )
      {
        err = pthread_attr_setinheritsched( &attr, PTHREAD_EXPLICIT_SCHED );
      }

      if ( ( err == 0 ) && ( stackAddr != nullptr ) && ( stackSize > 0 ) )
      {
        err = pthread_attr_setstack( &attr, stackAddr, stackSize );
        err = 0;
      }

      if ( err == 0 )
      {
        err = pthread_create( &thr, &attr, threadStart, pStateMachine);
      }

      if ( err != 0 )
      {
        thr = 0;
      }

      pthread_attr_destroy( &attr );
    }
  }

  return thr;
}

// End of KeyPressEventGenerator.cpp
